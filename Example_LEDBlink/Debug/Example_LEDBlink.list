
Example_LEDBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080024dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080024dc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000620d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001052  00000000  00000000  00026249  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f0  00000000  00000000  000272a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  00027890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001602a  00000000  00000000  00027de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000580e  00000000  00000000  0003de12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007da7c  00000000  00000000  00043620  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c109c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000170c  00000000  00000000  000c1118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002478 	.word	0x08002478

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002478 	.word	0x08002478

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9a6 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f87a 	bl	80002cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f848 	bl	800026c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80001dc:	2108      	movs	r1, #8
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <main+0x28>)
 80001e0:	f000 fc94 	bl	8000b0c <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80001e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e8:	f000 f9fe 	bl	80005e8 <HAL_Delay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80001ec:	e7f6      	b.n	80001dc <main+0x14>
 80001ee:	bf00      	nop
 80001f0:	48000400 	.word	0x48000400

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 f930 	bl	8002468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fc88 	bl	8000b40 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000236:	f000 f893 	bl	8000360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fb7c 	bl	8001950 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025e:	f000 f87f 	bl	8000360 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000272:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <MX_USART2_UART_Init+0x5c>)
 8000274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000278:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800027c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 80002b0:	f001 fd84 	bl	8001dbc <HAL_UART_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002ba:	f000 f851 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000028 	.word	0x20000028
 80002c8:	40004400 	.word	0x40004400

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002e2:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <MX_GPIO_Init+0x8c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <MX_GPIO_Init+0x8c>)
 80002e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_GPIO_Init+0x8c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002f6:	60bb      	str	r3, [r7, #8]
 80002f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_GPIO_Init+0x8c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a16      	ldr	r2, [pc, #88]	; (8000358 <MX_GPIO_Init+0x8c>)
 8000300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_GPIO_Init+0x8c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_GPIO_Init+0x8c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a10      	ldr	r2, [pc, #64]	; (8000358 <MX_GPIO_Init+0x8c>)
 8000318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_GPIO_Init+0x8c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2108      	movs	r1, #8
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <MX_GPIO_Init+0x90>)
 8000330:	f000 fbd4 	bl	8000adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000334:	2308      	movs	r3, #8
 8000336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4619      	mov	r1, r3
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x90>)
 800034c:	f000 fa54 	bl	80007f8 <HAL_GPIO_Init>

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	48000400 	.word	0x48000400

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x44>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_MspInit+0x44>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x44>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <HAL_MspInit+0x44>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a08      	ldr	r2, [pc, #32]	; (80003b4 <HAL_MspInit+0x44>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <HAL_MspInit+0x44>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000

080003b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a18      	ldr	r2, [pc, #96]	; (8000438 <HAL_UART_MspInit+0x80>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d129      	bne.n	800042e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <HAL_UART_MspInit+0x84>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a17      	ldr	r2, [pc, #92]	; (800043c <HAL_UART_MspInit+0x84>)
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_UART_MspInit+0x84>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_UART_MspInit+0x84>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a11      	ldr	r2, [pc, #68]	; (800043c <HAL_UART_MspInit+0x84>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_UART_MspInit+0x84>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800040a:	f248 0304 	movw	r3, #32772	; 0x8004
 800040e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000410:	2302      	movs	r3, #2
 8000412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000418:	2303      	movs	r3, #3
 800041a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800041c:	2307      	movs	r3, #7
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042a:	f000 f9e5 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800042e:	bf00      	nop
 8000430:	3728      	adds	r7, #40	; 0x28
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40004400 	.word	0x40004400
 800043c:	40021000 	.word	0x40021000

08000440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000452:	e7fe      	b.n	8000452 <HardFault_Handler+0x4>

08000454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <MemManage_Handler+0x4>

0800045a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <BusFault_Handler+0x4>

08000460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <UsageFault_Handler+0x4>

08000466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000494:	f000 f888 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <SystemInit+0x28>)
 80004a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a6:	4a07      	ldr	r2, [pc, #28]	; (80004c4 <SystemInit+0x28>)
 80004a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <SystemInit+0x28>)
 80004b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b6:	609a      	str	r2, [r3, #8]
#endif
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000500 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ce:	e003      	b.n	80004d8 <LoopCopyDataInit>

080004d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004d6:	3104      	adds	r1, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <LoopForever+0xe>)
	adds	r2, r0, r1
 80004dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004e0:	d3f6      	bcc.n	80004d0 <CopyDataInit>
	ldr	r2, =_sbss
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004e4:	e002      	b.n	80004ec <LoopFillZerobss>

080004e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004e8:	f842 3b04 	str.w	r3, [r2], #4

080004ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <LoopForever+0x16>)
	cmp	r2, r3
 80004ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004f0:	d3f9      	bcc.n	80004e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004f2:	f7ff ffd3 	bl	800049c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004f6:	f001 ff93 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004fa:	f7ff fe65 	bl	80001c8 <main>

080004fe <LoopForever>:

LoopForever:
    b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000500:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000504:	080024d0 	.word	0x080024d0
	ldr	r0, =_sdata
 8000508:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800050c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000510:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000514:	200000ac 	.word	0x200000ac

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x28>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92f 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f7ff ff1a 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f939 	bl	80007de <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f90f 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000008 	.word	0x20000008
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000008 	.word	0x20000008
 80005cc:	200000a8 	.word	0x200000a8

080005d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000a8 	.word	0x200000a8

080005e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000008 	.word	0x20000008

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff47 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5c 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000806:	e14e      	b.n	8000aa6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	f000 8140 	beq.w	8000aa0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d003      	beq.n	8000830 <HAL_GPIO_Init+0x38>
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b12      	cmp	r3, #18
 800082e:	d123      	bne.n	8000878 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	08da      	lsrs	r2, r3, #3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3208      	adds	r2, #8
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	220f      	movs	r2, #15
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	691a      	ldr	r2, [r3, #16]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	08da      	lsrs	r2, r3, #3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3208      	adds	r2, #8
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0203 	and.w	r2, r3, #3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d00b      	beq.n	80008cc <HAL_GPIO_Init+0xd4>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d007      	beq.n	80008cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c0:	2b11      	cmp	r3, #17
 80008c2:	d003      	beq.n	80008cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b12      	cmp	r3, #18
 80008ca:	d130      	bne.n	800092e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000902:	2201      	movs	r2, #1
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4013      	ands	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	091b      	lsrs	r3, r3, #4
 8000918:	f003 0201 	and.w	r2, r3, #1
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	2203      	movs	r2, #3
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 809a 	beq.w	8000aa0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096c:	4b55      	ldr	r3, [pc, #340]	; (8000ac4 <HAL_GPIO_Init+0x2cc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a54      	ldr	r2, [pc, #336]	; (8000ac4 <HAL_GPIO_Init+0x2cc>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b52      	ldr	r3, [pc, #328]	; (8000ac4 <HAL_GPIO_Init+0x2cc>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000984:	4a50      	ldr	r2, [pc, #320]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009ae:	d013      	beq.n	80009d8 <HAL_GPIO_Init+0x1e0>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <HAL_GPIO_Init+0x2d4>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d00d      	beq.n	80009d4 <HAL_GPIO_Init+0x1dc>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a45      	ldr	r2, [pc, #276]	; (8000ad0 <HAL_GPIO_Init+0x2d8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d007      	beq.n	80009d0 <HAL_GPIO_Init+0x1d8>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a44      	ldr	r2, [pc, #272]	; (8000ad4 <HAL_GPIO_Init+0x2dc>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d101      	bne.n	80009cc <HAL_GPIO_Init+0x1d4>
 80009c8:	2303      	movs	r3, #3
 80009ca:	e006      	b.n	80009da <HAL_GPIO_Init+0x1e2>
 80009cc:	2305      	movs	r3, #5
 80009ce:	e004      	b.n	80009da <HAL_GPIO_Init+0x1e2>
 80009d0:	2302      	movs	r3, #2
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0x1e2>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <HAL_GPIO_Init+0x1e2>
 80009d8:	2300      	movs	r3, #0
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	f002 0203 	and.w	r2, r2, #3
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009ea:	4937      	ldr	r1, [pc, #220]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a1c:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a46:	4a24      	ldr	r2, [pc, #144]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f47f aea9 	bne.w	8000808 <HAL_GPIO_Init+0x10>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	48000c00 	.word	0x48000c00
 8000ad8:	40010400 	.word	0x40010400

08000adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aec:	787b      	ldrb	r3, [r7, #1]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000af2:	887a      	ldrh	r2, [r7, #2]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000af8:	e002      	b.n	8000b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	695a      	ldr	r2, [r3, #20]
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	041a      	lsls	r2, r3, #16
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000b2c:	e002      	b.n	8000b34 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	619a      	str	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f000 bef4 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 816a 	beq.w	8000e3e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b6a:	4bb3      	ldr	r3, [pc, #716]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d00c      	beq.n	8000b90 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b76:	4bb0      	ldr	r3, [pc, #704]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d159      	bne.n	8000c36 <HAL_RCC_OscConfig+0xf6>
 8000b82:	4bad      	ldr	r3, [pc, #692]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8e:	d152      	bne.n	8000c36 <HAL_RCC_OscConfig+0xf6>
 8000b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b9c:	fa93 f3a3 	rbit	r3, r3
 8000ba0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ba4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d102      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x82>
 8000bbc:	4b9e      	ldr	r3, [pc, #632]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	e015      	b.n	8000bee <HAL_RCC_OscConfig+0xae>
 8000bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bda:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000bde:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000bea:	4b93      	ldr	r3, [pc, #588]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bf2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bf6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bfa:	fa92 f2a2 	rbit	r2, r2
 8000bfe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c02:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	f042 0220 	orr.w	r2, r2, #32
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	f002 021f 	and.w	r2, r2, #31
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 810c 	beq.w	8000e3c <HAL_RCC_OscConfig+0x2fc>
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 8106 	bne.w	8000e3c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	f000 be86 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d106      	bne.n	8000c50 <HAL_RCC_OscConfig+0x110>
 8000c42:	4b7d      	ldr	r3, [pc, #500]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a7c      	ldr	r2, [pc, #496]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e030      	b.n	8000cb2 <HAL_RCC_OscConfig+0x172>
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x134>
 8000c5a:	4b77      	ldr	r3, [pc, #476]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a76      	ldr	r2, [pc, #472]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b74      	ldr	r3, [pc, #464]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a73      	ldr	r2, [pc, #460]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e01e      	b.n	8000cb2 <HAL_RCC_OscConfig+0x172>
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7e:	d10c      	bne.n	8000c9a <HAL_RCC_OscConfig+0x15a>
 8000c80:	4b6d      	ldr	r3, [pc, #436]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6c      	ldr	r2, [pc, #432]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b6a      	ldr	r3, [pc, #424]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a69      	ldr	r2, [pc, #420]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e00b      	b.n	8000cb2 <HAL_RCC_OscConfig+0x172>
 8000c9a:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a66      	ldr	r2, [pc, #408]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	4b64      	ldr	r3, [pc, #400]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cb2:	4b61      	ldr	r3, [pc, #388]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f023 020f 	bic.w	r2, r3, #15
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	495d      	ldr	r1, [pc, #372]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d059      	beq.n	8000d84 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fc7e 	bl	80005d0 <HAL_GetTick>
 8000cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd8:	e00a      	b.n	8000cf0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cda:	f7ff fc79 	bl	80005d0 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b64      	cmp	r3, #100	; 0x64
 8000ce8:	d902      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f000 be29 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 8000cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d04:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	fab3 f383 	clz	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d102      	bne.n	8000d22 <HAL_RCC_OscConfig+0x1e2>
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	e015      	b.n	8000d4e <HAL_RCC_OscConfig+0x20e>
 8000d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d26:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d2e:	fa93 f3a3 	rbit	r3, r3
 8000d32:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d3e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d52:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d56:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d5a:	fa92 f2a2 	rbit	r2, r2
 8000d5e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d62:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	f042 0220 	orr.w	r2, r2, #32
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	f002 021f 	and.w	r2, r2, #31
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0ab      	beq.n	8000cda <HAL_RCC_OscConfig+0x19a>
 8000d82:	e05c      	b.n	8000e3e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc24 	bl	80005d0 <HAL_GetTick>
 8000d88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8c:	e00a      	b.n	8000da4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8e:	f7ff fc1f 	bl	80005d0 <HAL_GetTick>
 8000d92:	4602      	mov	r2, r0
 8000d94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	; 0x64
 8000d9c:	d902      	bls.n	8000da4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f000 bdcf 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000db8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbc:	fab3 f383 	clz	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x296>
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0x2c2>
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000df2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_RCC_OscConfig+0x2f8>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e0e:	fa92 f2a2 	rbit	r2, r2
 8000e12:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e16:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	f042 0220 	orr.w	r2, r2, #32
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	f002 021f 	and.w	r2, r2, #31
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1ab      	bne.n	8000d8e <HAL_RCC_OscConfig+0x24e>
 8000e36:	e002      	b.n	8000e3e <HAL_RCC_OscConfig+0x2fe>
 8000e38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 816f 	beq.w	800112c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e4e:	4bd0      	ldr	r3, [pc, #832]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e5a:	4bcd      	ldr	r3, [pc, #820]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d16c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x400>
 8000e66:	4bca      	ldr	r3, [pc, #808]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d166      	bne.n	8000f40 <HAL_RCC_OscConfig+0x400>
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e7c:	fa93 f3a3 	rbit	r3, r3
 8000e80:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e84:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e88:	fab3 f383 	clz	r3, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d102      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x362>
 8000e9c:	4bbc      	ldr	r3, [pc, #752]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	e013      	b.n	8000eca <HAL_RCC_OscConfig+0x38a>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000ec6:	4bb2      	ldr	r3, [pc, #712]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ed0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ed4:	fa92 f2a2 	rbit	r2, r2
 8000ed8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000edc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	f002 021f 	and.w	r2, r2, #31
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <HAL_RCC_OscConfig+0x3cc>
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d002      	beq.n	8000f0c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f000 bd1b 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0c:	4ba0      	ldr	r3, [pc, #640]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	21f8      	movs	r1, #248	; 0xf8
 8000f1c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f24:	fa91 f1a1 	rbit	r1, r1
 8000f28:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f2c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f30:	fab1 f181 	clz	r1, r1
 8000f34:	b2c9      	uxtb	r1, r1
 8000f36:	408b      	lsls	r3, r1
 8000f38:	4995      	ldr	r1, [pc, #596]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3e:	e0f5      	b.n	800112c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8085 	beq.w	8001056 <HAL_RCC_OscConfig+0x516>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	461a      	mov	r2, r3
 8000f74:	2301      	movs	r3, #1
 8000f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fb2a 	bl	80005d0 <HAL_GetTick>
 8000f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	e00a      	b.n	8000f98 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f82:	f7ff fb25 	bl	80005d0 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d902      	bls.n	8000f98 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f000 bcd5 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000faa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	095b      	lsrs	r3, r3, #5
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x488>
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	e013      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4b0>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fe0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000ff6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ffa:	fa92 f2a2 	rbit	r2, r2
 8000ffe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001002:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001006:	fab2 f282 	clz	r2, r2
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	f042 0220 	orr.w	r2, r2, #32
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	f002 021f 	and.w	r2, r2, #31
 8001016:	2101      	movs	r1, #1
 8001018:	fa01 f202 	lsl.w	r2, r1, r2
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0af      	beq.n	8000f82 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	21f8      	movs	r1, #248	; 0xf8
 8001032:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800103a:	fa91 f1a1 	rbit	r1, r1
 800103e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001042:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001046:	fab1 f181 	clz	r1, r1
 800104a:	b2c9      	uxtb	r1, r1
 800104c:	408b      	lsls	r3, r1
 800104e:	4950      	ldr	r1, [pc, #320]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e06a      	b.n	800112c <HAL_RCC_OscConfig+0x5ec>
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001068:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001076:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	2300      	movs	r3, #0
 8001080:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff faa5 	bl	80005d0 <HAL_GetTick>
 8001086:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff faa0 	bl	80005d0 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d902      	bls.n	80010a2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	f000 bc50 	b.w	8001942 <HAL_RCC_OscConfig+0xe02>
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80010b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_OscConfig+0x592>
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	e013      	b.n	80010fa <HAL_RCC_OscConfig+0x5ba>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_RCC_OscConfig+0x650>)
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2202      	movs	r2, #2
 80010fc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001100:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001104:	fa92 f2a2 	rbit	r2, r2
 8001108:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800110c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001110:	fab2 f282 	clz	r2, r2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f042 0220 	orr.w	r2, r2, #32
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f002 021f 	and.w	r2, r2, #31
 8001120:	2101      	movs	r1, #1
 8001122:	fa01 f202 	lsl.w	r2, r1, r2
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1af      	bne.n	800108c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80da 	beq.w	80012f0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d069      	beq.n	800121a <HAL_RCC_OscConfig+0x6da>
 8001146:	2301      	movs	r3, #1
 8001148:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x654>)
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	461a      	mov	r2, r3
 800116c:	2301      	movs	r3, #1
 800116e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fa2e 	bl	80005d0 <HAL_GetTick>
 8001174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001178:	e00e      	b.n	8001198 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fa29 	bl	80005d0 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d906      	bls.n	8001198 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e3d9      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	10908120 	.word	0x10908120
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ae:	2202      	movs	r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	fa93 f2a3 	rbit	r2, r3
 80011bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	fa93 f2a3 	rbit	r2, r3
 80011d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80011dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011e2:	2102      	movs	r1, #2
 80011e4:	6019      	str	r1, [r3, #0]
 80011e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f1a3 	rbit	r1, r3
 80011f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011f4:	6019      	str	r1, [r3, #0]
  return result;
 80011f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0b0      	beq.n	800117a <HAL_RCC_OscConfig+0x63a>
 8001218:	e06a      	b.n	80012f0 <HAL_RCC_OscConfig+0x7b0>
 800121a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	fa93 f2a3 	rbit	r2, r3
 800122c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001230:	601a      	str	r2, [r3, #0]
  return result;
 8001232:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001236:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <HAL_RCC_OscConfig+0x934>)
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	2300      	movs	r3, #0
 800124a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff f9c0 	bl	80005d0 <HAL_GetTick>
 8001250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	e009      	b.n	800126a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff f9bb 	bl	80005d0 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e36b      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800126a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800126e:	2202      	movs	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	fa93 f2a3 	rbit	r2, r3
 800127c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800129e:	2202      	movs	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fa93 f2a3 	rbit	r2, r3
 80012ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b2:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80012b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012ba:	2102      	movs	r1, #2
 80012bc:	6019      	str	r1, [r3, #0]
 80012be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fa93 f1a3 	rbit	r1, r3
 80012c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012cc:	6019      	str	r1, [r3, #0]
  return result;
 80012ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1b2      	bne.n	8001256 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8158 	beq.w	80015b0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d112      	bne.n	8001338 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11a      	bne.n	800137a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001344:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001350:	f7ff f93e 	bl	80005d0 <HAL_GetTick>
 8001354:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e009      	b.n	800136e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff f939 	bl	80005d0 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e2e9      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x938>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0ef      	beq.n	800135a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x852>
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a39      	ldr	r2, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e02f      	b.n	80013f2 <HAL_RCC_OscConfig+0x8b2>
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x876>
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a30      	ldr	r2, [pc, #192]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013ae:	f023 0304 	bic.w	r3, r3, #4
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	e01d      	b.n	80013f2 <HAL_RCC_OscConfig+0x8b2>
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x89a>
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x8b2>
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d06b      	beq.n	80014d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff f8e8 	bl	80005d0 <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff f8e3 	bl	80005d0 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	; 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e291      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800141e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fa93 f2a3 	rbit	r2, r3
 8001430:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800144c:	601a      	str	r2, [r3, #0]
  return result;
 800144e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d109      	bne.n	800147c <HAL_RCC_OscConfig+0x93c>
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <HAL_RCC_OscConfig+0x930>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x958>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	10908120 	.word	0x10908120
 8001478:	40007000 	.word	0x40007000
 800147c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001480:	2202      	movs	r2, #2
 8001482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f2a3 	rbit	r2, r3
 800148e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	4bbb      	ldr	r3, [pc, #748]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800149c:	2102      	movs	r1, #2
 800149e:	6011      	str	r1, [r2, #0]
 80014a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	fa92 f1a2 	rbit	r1, r2
 80014aa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014ae:	6011      	str	r1, [r2, #0]
  return result;
 80014b0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	f002 021f 	and.w	r2, r2, #31
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d099      	beq.n	8001406 <HAL_RCC_OscConfig+0x8c6>
 80014d2:	e063      	b.n	800159c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff f87c 	bl	80005d0 <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff f877 	bl	80005d0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e225      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 80014f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001524:	601a      	str	r2, [r3, #0]
  return result;
 8001526:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800152a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0xa06>
 8001540:	4b90      	ldr	r3, [pc, #576]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	e00d      	b.n	8001562 <HAL_RCC_OscConfig+0xa22>
 8001546:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fa93 f2a3 	rbit	r2, r3
 8001558:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001566:	2102      	movs	r1, #2
 8001568:	6011      	str	r1, [r2, #0]
 800156a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	fa92 f1a2 	rbit	r1, r2
 8001574:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001578:	6011      	str	r1, [r2, #0]
  return result;
 800157a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	fab2 f282 	clz	r2, r2
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	f002 021f 	and.w	r2, r2, #31
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1a0      	bne.n	80014de <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800159c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a4:	4b77      	ldr	r3, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a76      	ldr	r2, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80015aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 81c2 	beq.w	8001940 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015bc:	4b71      	ldr	r3, [pc, #452]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f000 819c 	beq.w	8001902 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	f040 8114 	bne.w	80017fe <HAL_RCC_OscConfig+0xcbe>
 80015d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	fa93 f2a3 	rbit	r2, r3
 80015ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015ee:	601a      	str	r2, [r3, #0]
  return result;
 80015f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	2300      	movs	r3, #0
 800160a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7fe ffe0 	bl	80005d0 <HAL_GetTick>
 8001610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	e009      	b.n	800162a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7fe ffdb 	bl	80005d0 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e18b      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 800162a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800162e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001642:	601a      	str	r2, [r3, #0]
  return result;
 8001644:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0xb24>
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e01b      	b.n	800169c <HAL_RCC_OscConfig+0xb5c>
 8001664:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800166c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f2a3 	rbit	r2, r3
 8001692:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016a4:	6011      	str	r1, [r2, #0]
 80016a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	fa92 f1a2 	rbit	r1, r2
 80016b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016b4:	6011      	str	r1, [r2, #0]
  return result;
 80016b6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	fab2 f282 	clz	r2, r2
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f002 021f 	and.w	r2, r2, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d19e      	bne.n	8001616 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	4925      	ldr	r1, [pc, #148]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	fa93 f2a3 	rbit	r2, r3
 8001708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800170c:	601a      	str	r2, [r3, #0]
  return result;
 800170e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001712:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800171e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	461a      	mov	r2, r3
 8001726:	2301      	movs	r3, #1
 8001728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7fe ff51 	bl	80005d0 <HAL_GetTick>
 800172e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001732:	e009      	b.n	8001748 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7fe ff4c 	bl	80005d0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0fc      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 8001748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800174c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001760:	601a      	str	r2, [r3, #0]
  return result;
 8001762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001766:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0xc48>
 800177c:	4b01      	ldr	r3, [pc, #4]	; (8001784 <HAL_RCC_OscConfig+0xc44>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e01e      	b.n	80017c0 <HAL_RCC_OscConfig+0xc80>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800178c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017c8:	6011      	str	r1, [r2, #0]
 80017ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	fa92 f1a2 	rbit	r1, r2
 80017d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017d8:	6011      	str	r1, [r2, #0]
  return result;
 80017da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	fab2 f282 	clz	r2, r2
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f002 021f 	and.w	r2, r2, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d09b      	beq.n	8001734 <HAL_RCC_OscConfig+0xbf4>
 80017fc:	e0a0      	b.n	8001940 <HAL_RCC_OscConfig+0xe00>
 80017fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001802:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001816:	601a      	str	r2, [r3, #0]
  return result;
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001828:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	461a      	mov	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7fe fecc 	bl	80005d0 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe fec7 	bl	80005d0 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e077      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
 8001852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	fa93 f2a3 	rbit	r2, r3
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	601a      	str	r2, [r3, #0]
  return result;
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_RCC_OscConfig+0xd4c>
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e01b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd84>
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f107 0210 	add.w	r2, r7, #16
 80018c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018cc:	6011      	str	r1, [r2, #0]
 80018ce:	f107 0210 	add.w	r2, r7, #16
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	fa92 f1a2 	rbit	r1, r2
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	6011      	str	r1, [r2, #0]
  return result;
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f042 0220 	orr.w	r2, r2, #32
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f002 021f 	and.w	r2, r2, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d19e      	bne.n	800183e <HAL_RCC_OscConfig+0xcfe>
 8001900:	e01e      	b.n	8001940 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e018      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_RCC_OscConfig+0xe0c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001918:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800191c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	429a      	cmp	r2, r3
 8001928:	d108      	bne.n	800193c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800192a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800192e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b09e      	sub	sp, #120	; 0x78
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e162      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b90      	ldr	r3, [pc, #576]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d910      	bls.n	8001998 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b8d      	ldr	r3, [pc, #564]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	498b      	ldr	r1, [pc, #556]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e14a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	497f      	ldr	r1, [pc, #508]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80dc 	beq.w	8001b7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d13c      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xf6>
 80019cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xa6>
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e00f      	b.n	8001a16 <HAL_RCC_ClockConfig+0xc6>
 80019f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	667b      	str	r3, [r7, #100]	; 0x64
 8001a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a08:	663b      	str	r3, [r7, #96]	; 0x60
 8001a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a26:	fab2 f282 	clz	r2, r2
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f042 0220 	orr.w	r2, r2, #32
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f002 021f 	and.w	r2, r2, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d17b      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0f3      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d13c      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x178>
 8001a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x128>
 8001a72:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e00f      	b.n	8001a98 <HAL_RCC_ClockConfig+0x148>
 8001a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
 8001a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa0:	fa92 f2a2 	rbit	r2, r2
 8001aa4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d13a      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b2      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1a0>
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e00d      	b.n	8001b0c <HAL_RCC_ClockConfig+0x1bc>
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	2302      	movs	r3, #2
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	61ba      	str	r2, [r7, #24]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	fa92 f2a2 	rbit	r2, r2
 8001b16:	617a      	str	r2, [r7, #20]
  return result;
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f002 021f 	and.w	r2, r2, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e079      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	491a      	ldr	r1, [pc, #104]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe fd40 	bl	80005d0 <HAL_GetTick>
 8001b50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7fe fd3c 	bl	80005d0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e061      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_RCC_ClockConfig+0x260>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d214      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4906      	ldr	r1, [pc, #24]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e040      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2de>
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	491a      	ldr	r1, [pc, #104]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4912      	ldr	r1, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bf2:	f000 f829 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_RCC_ClockConfig+0x2e8>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	22f0      	movs	r2, #240	; 0xf0
 8001c02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	60fa      	str	r2, [r7, #12]
  return result;
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	40d3      	lsrs	r3, r2
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x2ec>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_RCC_ClockConfig+0x2f0>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_ClockConfig+0x2f4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc8e 	bl	8000548 <HAL_InitTick>
  
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3778      	adds	r7, #120	; 0x78
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	08002490 	.word	0x08002490
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b08b      	sub	sp, #44	; 0x2c
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x30>
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x36>
 8001c76:	e03c      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c7a:	623b      	str	r3, [r7, #32]
      break;
 8001c7c:	e03c      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	fa92 f2a2 	rbit	r2, r2
 8001c90:	607a      	str	r2, [r7, #4]
  return result;
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	40d3      	lsrs	r3, r2
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	220f      	movs	r2, #15
 8001cac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	fa92 f2a2 	rbit	r2, r2
 8001cb4:	60fa      	str	r2, [r7, #12]
  return result;
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	40d3      	lsrs	r3, r2
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	e004      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	623b      	str	r3, [r7, #32]
      break;
 8001cf0:	e002      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cf4:	623b      	str	r3, [r7, #32]
      break;
 8001cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	372c      	adds	r7, #44	; 0x2c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	007a1200 	.word	0x007a1200
 8001d10:	080024a8 	.word	0x080024a8
 8001d14:	080024b8 	.word	0x080024b8
 8001d18:	003d0900 	.word	0x003d0900

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d3a:	f7ff ffef 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3e:	4601      	mov	r1, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	fa92 f2a2 	rbit	r2, r2
 8001d54:	603a      	str	r2, [r7, #0]
  return result;
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	40d3      	lsrs	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	080024a0 	.word	0x080024a0

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d7e:	f7ff ffcd 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d82:	4601      	mov	r1, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001d8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	fa92 f2a2 	rbit	r2, r2
 8001d98:	603a      	str	r2, [r7, #0]
  return result;
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	40d3      	lsrs	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	080024a0 	.word	0x080024a0

08001dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e040      	b.n	8001e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe faea 	bl	80003b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f82c 	bl	8001e58 <UART_SetConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e022      	b.n	8001e50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f9a2 	bl	800215c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fa29 	bl	80022a0 <UART_CheckIdleState>
 8001e4e:	4603      	mov	r3, r0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4ba2      	ldr	r3, [pc, #648]	; (8002110 <UART_SetConfig+0x2b8>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	6939      	ldr	r1, [r7, #16]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a90      	ldr	r2, [pc, #576]	; (8002114 <UART_SetConfig+0x2bc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d121      	bne.n	8001f1c <UART_SetConfig+0xc4>
 8001ed8:	4b8f      	ldr	r3, [pc, #572]	; (8002118 <UART_SetConfig+0x2c0>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d817      	bhi.n	8001f14 <UART_SetConfig+0xbc>
 8001ee4:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <UART_SetConfig+0x94>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f09 	.word	0x08001f09
 8001ef4:	08001f0f 	.word	0x08001f0f
 8001ef8:	08001f03 	.word	0x08001f03
 8001efc:	2300      	movs	r3, #0
 8001efe:	77fb      	strb	r3, [r7, #31]
 8001f00:	e01e      	b.n	8001f40 <UART_SetConfig+0xe8>
 8001f02:	2302      	movs	r3, #2
 8001f04:	77fb      	strb	r3, [r7, #31]
 8001f06:	e01b      	b.n	8001f40 <UART_SetConfig+0xe8>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	77fb      	strb	r3, [r7, #31]
 8001f0c:	e018      	b.n	8001f40 <UART_SetConfig+0xe8>
 8001f0e:	2308      	movs	r3, #8
 8001f10:	77fb      	strb	r3, [r7, #31]
 8001f12:	e015      	b.n	8001f40 <UART_SetConfig+0xe8>
 8001f14:	2310      	movs	r3, #16
 8001f16:	77fb      	strb	r3, [r7, #31]
 8001f18:	bf00      	nop
 8001f1a:	e011      	b.n	8001f40 <UART_SetConfig+0xe8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a7e      	ldr	r2, [pc, #504]	; (800211c <UART_SetConfig+0x2c4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d102      	bne.n	8001f2c <UART_SetConfig+0xd4>
 8001f26:	2300      	movs	r3, #0
 8001f28:	77fb      	strb	r3, [r7, #31]
 8001f2a:	e009      	b.n	8001f40 <UART_SetConfig+0xe8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a7b      	ldr	r2, [pc, #492]	; (8002120 <UART_SetConfig+0x2c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d102      	bne.n	8001f3c <UART_SetConfig+0xe4>
 8001f36:	2300      	movs	r3, #0
 8001f38:	77fb      	strb	r3, [r7, #31]
 8001f3a:	e001      	b.n	8001f40 <UART_SetConfig+0xe8>
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f48:	f040 8082 	bne.w	8002050 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d85e      	bhi.n	8002010 <UART_SetConfig+0x1b8>
 8001f52:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <UART_SetConfig+0x100>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f7d 	.word	0x08001f7d
 8001f5c:	08001f9d 	.word	0x08001f9d
 8001f60:	08001fbd 	.word	0x08001fbd
 8001f64:	08002011 	.word	0x08002011
 8001f68:	08001fd9 	.word	0x08001fd9
 8001f6c:	08002011 	.word	0x08002011
 8001f70:	08002011 	.word	0x08002011
 8001f74:	08002011 	.word	0x08002011
 8001f78:	08001ff9 	.word	0x08001ff9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f7ff feda 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	61bb      	str	r3, [r7, #24]
        break;
 8001f9a:	e03c      	b.n	8002016 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f9c:	f7ff feec 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8001fa0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	005a      	lsls	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	61bb      	str	r3, [r7, #24]
        break;
 8001fba:	e02c      	b.n	8002016 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001fc6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6852      	ldr	r2, [r2, #4]
 8001fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	61bb      	str	r3, [r7, #24]
        break;
 8001fd6:	e01e      	b.n	8002016 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fd8:	f7ff fe36 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001fdc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	005a      	lsls	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	61bb      	str	r3, [r7, #24]
        break;
 8001ff6:	e00e      	b.n	8002016 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	b29b      	uxth	r3, r3
 800200c:	61bb      	str	r3, [r7, #24]
        break;
 800200e:	e002      	b.n	8002016 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
        break;
 8002014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d916      	bls.n	800204a <UART_SetConfig+0x1f2>
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002022:	d212      	bcs.n	800204a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	b29b      	uxth	r3, r3
 8002028:	f023 030f 	bic.w	r3, r3, #15
 800202c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	b29a      	uxth	r2, r3
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	4313      	orrs	r3, r2
 800203e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	897a      	ldrh	r2, [r7, #10]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	e07d      	b.n	8002146 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
 800204e:	e07a      	b.n	8002146 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8002050:	7ffb      	ldrb	r3, [r7, #31]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d866      	bhi.n	8002124 <UART_SetConfig+0x2cc>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <UART_SetConfig+0x204>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	08002081 	.word	0x08002081
 8002060:	0800209f 	.word	0x0800209f
 8002064:	080020bd 	.word	0x080020bd
 8002068:	08002125 	.word	0x08002125
 800206c:	080020d9 	.word	0x080020d9
 8002070:	08002125 	.word	0x08002125
 8002074:	08002125 	.word	0x08002125
 8002078:	08002125 	.word	0x08002125
 800207c:	080020f7 	.word	0x080020f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002080:	f7ff fe58 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8002084:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	085a      	lsrs	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	b29b      	uxth	r3, r3
 800209a:	61bb      	str	r3, [r7, #24]
        break;
 800209c:	e045      	b.n	800212a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800209e:	f7ff fe6b 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80020a2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	085a      	lsrs	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	61bb      	str	r3, [r7, #24]
        break;
 80020ba:	e036      	b.n	800212a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80020c6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6852      	ldr	r2, [r2, #4]
 80020ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	61bb      	str	r3, [r7, #24]
        break;
 80020d6:	e028      	b.n	800212a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020d8:	f7ff fdb6 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80020dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	085a      	lsrs	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	441a      	add	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	61bb      	str	r3, [r7, #24]
        break;
 80020f4:	e019      	b.n	800212a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	b29b      	uxth	r3, r3
 800210a:	61bb      	str	r3, [r7, #24]
        break;
 800210c:	e00d      	b.n	800212a <UART_SetConfig+0x2d2>
 800210e:	bf00      	nop
 8002110:	efff69f3 	.word	0xefff69f3
 8002114:	40013800 	.word	0x40013800
 8002118:	40021000 	.word	0x40021000
 800211c:	40004400 	.word	0x40004400
 8002120:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	75fb      	strb	r3, [r7, #23]
        break;
 8002128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d908      	bls.n	8002142 <UART_SetConfig+0x2ea>
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d204      	bcs.n	8002142 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	e001      	b.n	8002146 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002152:	7dfb      	ldrb	r3, [r7, #23]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01a      	beq.n	8002272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800225a:	d10a      	bne.n	8002272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
  }
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80022ae:	f7fe f98f 	bl	80005d0 <HAL_GetTick>
 80022b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d10e      	bne.n	80022e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f82a 	bl	800232a <UART_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e020      	b.n	8002322 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d10e      	bne.n	800230c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f814 	bl	800232a <UART_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e00a      	b.n	8002322 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800233a:	e05d      	b.n	80023f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002342:	d059      	beq.n	80023f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002344:	f7fe f944 	bl	80005d0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	d302      	bcc.n	800235a <UART_WaitOnFlagUntilTimeout+0x30>
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11b      	bne.n	8002392 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002368:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e042      	b.n	8002418 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02b      	beq.n	80023f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ae:	d123      	bne.n	80023f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e00f      	b.n	8002418 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	4013      	ands	r3, r2
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	429a      	cmp	r2, r3
 8002414:	d092      	beq.n	800233c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4e0d      	ldr	r6, [pc, #52]	; (8002458 <__libc_init_array+0x38>)
 8002424:	4c0d      	ldr	r4, [pc, #52]	; (800245c <__libc_init_array+0x3c>)
 8002426:	1ba4      	subs	r4, r4, r6
 8002428:	10a4      	asrs	r4, r4, #2
 800242a:	2500      	movs	r5, #0
 800242c:	42a5      	cmp	r5, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	4e0b      	ldr	r6, [pc, #44]	; (8002460 <__libc_init_array+0x40>)
 8002432:	4c0c      	ldr	r4, [pc, #48]	; (8002464 <__libc_init_array+0x44>)
 8002434:	f000 f820 	bl	8002478 <_init>
 8002438:	1ba4      	subs	r4, r4, r6
 800243a:	10a4      	asrs	r4, r4, #2
 800243c:	2500      	movs	r5, #0
 800243e:	42a5      	cmp	r5, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002448:	4798      	blx	r3
 800244a:	3501      	adds	r5, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002452:	4798      	blx	r3
 8002454:	3501      	adds	r5, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	080024c8 	.word	0x080024c8
 800245c:	080024c8 	.word	0x080024c8
 8002460:	080024c8 	.word	0x080024c8
 8002464:	080024cc 	.word	0x080024cc

08002468 <memset>:
 8002468:	4402      	add	r2, r0
 800246a:	4603      	mov	r3, r0
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <memset+0xa>
 8002470:	4770      	bx	lr
 8002472:	f803 1b01 	strb.w	r1, [r3], #1
 8002476:	e7f9      	b.n	800246c <memset+0x4>

08002478 <_init>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	bf00      	nop
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr

08002484 <_fini>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr
