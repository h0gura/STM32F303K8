
Example_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d54  08004d54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d54  08004d54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08004dcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004dcc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6ab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d2a  00000000  00000000  0002c74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002eec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000185db  00000000  00000000  0002f820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c5d  00000000  00000000  00047dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084968  00000000  00000000  00051a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d63c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000d643c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bf0 	.word	0x08004bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004bf0 	.word	0x08004bf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000276:	4b37      	ldr	r3, [pc, #220]	; (8000354 <main+0xe4>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f003 fd2c 	bl	8003cdc <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fd78 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f874 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f934 	bl	80004f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f902 	bl	8000498 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000294:	f000 f8c0 	bl	8000418 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  result = SD_MPU6050_Init(&hi2c1, &mpu1, SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_2G, SD_MPU6050_Gyroscope_250s);
 8000298:	2300      	movs	r3, #0
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2300      	movs	r3, #0
 800029e:	2200      	movs	r2, #0
 80002a0:	492d      	ldr	r1, [pc, #180]	; (8000358 <main+0xe8>)
 80002a2:	482e      	ldr	r0, [pc, #184]	; (800035c <main+0xec>)
 80002a4:	f000 f973 	bl	800058e <SD_MPU6050_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	75fb      	strb	r3, [r7, #23]
  HAL_Delay(500);
 80002ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b0:	f000 fdc8 	bl	8000e44 <HAL_Delay>

  if(result == SD_MPU6050_Result_Ok)
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d103      	bne.n	80002c2 <main+0x52>
  {
	  printf("MPU6050 initialize success\n");
 80002ba:	4829      	ldr	r0, [pc, #164]	; (8000360 <main+0xf0>)
 80002bc:	f003 fd06 	bl	8003ccc <puts>
 80002c0:	e002      	b.n	80002c8 <main+0x58>
  }
  else
  {
	  printf("MPU6050 initialize error\n");
 80002c2:	4828      	ldr	r0, [pc, #160]	; (8000364 <main+0xf4>)
 80002c4:	f003 fd02 	bl	8003ccc <puts>
  }
  HAL_Delay(500);
 80002c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002cc:	f000 fdba 	bl	8000e44 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SD_MPU6050_ReadTemperature(&hi2c1,&mpu1);
 80002d0:	4921      	ldr	r1, [pc, #132]	; (8000358 <main+0xe8>)
 80002d2:	4822      	ldr	r0, [pc, #136]	; (800035c <main+0xec>)
 80002d4:	f000 fb6c 	bl	80009b0 <SD_MPU6050_ReadTemperature>
	  temp = mpu1.Temperature;
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <main+0xe8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	613b      	str	r3, [r7, #16]
	  printf("temp: %d\n", (int)temp);
 80002de:	edd7 7a04 	vldr	s15, [r7, #16]
 80002e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002e6:	ee17 1a90 	vmov	r1, s15
 80002ea:	481f      	ldr	r0, [pc, #124]	; (8000368 <main+0xf8>)
 80002ec:	f003 fc7a 	bl	8003be4 <iprintf>

	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 80002f0:	4919      	ldr	r1, [pc, #100]	; (8000358 <main+0xe8>)
 80002f2:	481a      	ldr	r0, [pc, #104]	; (800035c <main+0xec>)
 80002f4:	f000 fb12 	bl	800091c <SD_MPU6050_ReadGyroscope>
	  g_x = mpu1.Gyroscope_X;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <main+0xe8>)
 80002fa:	8a5b      	ldrh	r3, [r3, #18]
 80002fc:	81fb      	strh	r3, [r7, #14]
	  g_y = mpu1.Gyroscope_Y;
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <main+0xe8>)
 8000300:	8a9b      	ldrh	r3, [r3, #20]
 8000302:	81bb      	strh	r3, [r7, #12]
	  g_z = mpu1.Gyroscope_Z;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <main+0xe8>)
 8000306:	8adb      	ldrh	r3, [r3, #22]
 8000308:	817b      	strh	r3, [r7, #10]
	  printf("g_x: %d, g_y: %d, g_z: %d\n", g_x, g_y, g_z);
 800030a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800030e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000312:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000316:	4815      	ldr	r0, [pc, #84]	; (800036c <main+0xfc>)
 8000318:	f003 fc64 	bl	8003be4 <iprintf>

	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 800031c:	490e      	ldr	r1, [pc, #56]	; (8000358 <main+0xe8>)
 800031e:	480f      	ldr	r0, [pc, #60]	; (800035c <main+0xec>)
 8000320:	f000 fab2 	bl	8000888 <SD_MPU6050_ReadAccelerometer>
	  a_x = mpu1.Accelerometer_X;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <main+0xe8>)
 8000326:	899b      	ldrh	r3, [r3, #12]
 8000328:	813b      	strh	r3, [r7, #8]
	  a_y = mpu1.Accelerometer_Y;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <main+0xe8>)
 800032c:	89db      	ldrh	r3, [r3, #14]
 800032e:	80fb      	strh	r3, [r7, #6]
	  a_z = mpu1.Accelerometer_Z;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <main+0xe8>)
 8000332:	8a1b      	ldrh	r3, [r3, #16]
 8000334:	80bb      	strh	r3, [r7, #4]
	  printf("a_x: %d, a_y: %d, a_z: %d\n", a_x, a_y, a_z);
 8000336:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800033a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800033e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000342:	480b      	ldr	r0, [pc, #44]	; (8000370 <main+0x100>)
 8000344:	f003 fc4e 	bl	8003be4 <iprintf>

	  HAL_Delay(500);
 8000348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034c:	f000 fd7a 	bl	8000e44 <HAL_Delay>
	  SD_MPU6050_ReadTemperature(&hi2c1,&mpu1);
 8000350:	e7be      	b.n	80002d0 <main+0x60>
 8000352:	bf00      	nop
 8000354:	2000000c 	.word	0x2000000c
 8000358:	20000164 	.word	0x20000164
 800035c:	20000098 	.word	0x20000098
 8000360:	08004c08 	.word	0x08004c08
 8000364:	08004c24 	.word	0x08004c24
 8000368:	08004c40 	.word	0x08004c40
 800036c:	08004c4c 	.word	0x08004c4c
 8000370:	08004c68 	.word	0x08004c68

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b096      	sub	sp, #88	; 0x58
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f003 fc26 	bl	8003bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 031c 	add.w	r3, r7, #28
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2310      	movs	r3, #16
 80003b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fdb5 	bl	8001f2c <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c8:	f000 f8da 	bl	8000580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e0:	f107 031c 	add.w	r3, r7, #28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fca8 	bl	8002d3c <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003f2:	f000 f8c5 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003f6:	2320      	movs	r3, #32
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fed1 	bl	80031a8 <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800040c:	f000 f8b8 	bl	8000580 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3758      	adds	r7, #88	; 0x58
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_I2C1_Init+0x74>)
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <MX_I2C1_Init+0x78>)
 8000420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <MX_I2C1_Init+0x74>)
 8000424:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <MX_I2C1_Init+0x7c>)
 8000426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_I2C1_Init+0x74>)
 8000430:	2201      	movs	r2, #1
 8000432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_I2C1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_I2C1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_I2C1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000452:	480e      	ldr	r0, [pc, #56]	; (800048c <MX_I2C1_Init+0x74>)
 8000454:	f000 ff70 	bl	8001338 <HAL_I2C_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800045e:	f000 f88f 	bl	8000580 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000462:	2100      	movs	r1, #0
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <MX_I2C1_Init+0x74>)
 8000466:	f001 fcc9 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000470:	f000 f886 	bl	8000580 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000474:	2100      	movs	r1, #0
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_I2C1_Init+0x74>)
 8000478:	f001 fd0b 	bl	8001e92 <HAL_I2CEx_ConfigDigitalFilter>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000482:	f000 f87d 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000098 	.word	0x20000098
 8000490:	40005400 	.word	0x40005400
 8000494:	2000090e 	.word	0x2000090e

08000498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <MX_USART2_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004dc:	f002 ff8a 	bl	80033f4 <HAL_UART_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e6:	f000 f84b 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200000e4 	.word	0x200000e4
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_GPIO_Init+0x5c>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <MX_GPIO_Init+0x5c>)
 8000504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_GPIO_Init+0x5c>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_GPIO_Init+0x5c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <MX_GPIO_Init+0x5c>)
 800051c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_GPIO_Init+0x5c>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_GPIO_Init+0x5c>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <MX_GPIO_Init+0x5c>)
 8000534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_GPIO_Init+0x5c>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	b29a      	uxth	r2, r3
 8000568:	230a      	movs	r3, #10
 800056a:	68b9      	ldr	r1, [r7, #8]
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <_write+0x24>)
 800056e:	f002 ff8f 	bl	8003490 <HAL_UART_Transmit>
  return len;
 8000572:	687b      	ldr	r3, [r7, #4]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000e4 	.word	0x200000e4

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b08a      	sub	sp, #40	; 0x28
 8000592:	af02      	add	r7, sp, #8
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	4611      	mov	r1, r2
 800059a:	461a      	mov	r2, r3
 800059c:	460b      	mov	r3, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80005a4:	2375      	movs	r3, #117	; 0x75
 80005a6:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80005be:	7efb      	ldrb	r3, [r7, #27]
 80005c0:	b299      	uxth	r1, r3
 80005c2:	2305      	movs	r3, #5
 80005c4:	2202      	movs	r2, #2
 80005c6:	69f8      	ldr	r0, [r7, #28]
 80005c8:	f001 f930 	bl	800182c <HAL_I2C_IsDeviceReady>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e04c      	b.n	8000670 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 80005d6:	7efb      	ldrb	r3, [r7, #27]
 80005d8:	b299      	uxth	r1, r3
 80005da:	f107 021a 	add.w	r2, r7, #26
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	69f8      	ldr	r0, [r7, #28]
 80005e8:	f000 ff36 	bl	8001458 <HAL_I2C_Master_Transmit>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e03c      	b.n	8000670 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 80005f6:	7efb      	ldrb	r3, [r7, #27]
 80005f8:	b299      	uxth	r1, r3
 80005fa:	f107 0219 	add.w	r2, r7, #25
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	69f8      	ldr	r0, [r7, #28]
 8000608:	f001 f81a 	bl	8001640 <HAL_I2C_Master_Receive>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8000612:	2301      	movs	r3, #1
 8000614:	e02c      	b.n	8000670 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8000616:	2303      	movs	r3, #3
 8000618:	e02a      	b.n	8000670 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 800061a:	bf00      	nop
 800061c:	7e7b      	ldrb	r3, [r7, #25]
 800061e:	2b68      	cmp	r3, #104	; 0x68
 8000620:	d1f9      	bne.n	8000616 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8000622:	236b      	movs	r3, #107	; 0x6b
 8000624:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800062a:	7efb      	ldrb	r3, [r7, #27]
 800062c:	b299      	uxth	r1, r3
 800062e:	f107 0214 	add.w	r2, r7, #20
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2302      	movs	r3, #2
 800063a:	69f8      	ldr	r0, [r7, #28]
 800063c:	f000 ff0c 	bl	8001458 <HAL_I2C_Master_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8000646:	2301      	movs	r3, #1
 8000648:	e012      	b.n	8000670 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 800064a:	2207      	movs	r2, #7
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f000 f812 	bl	8000678 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	461a      	mov	r2, r3
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 f830 	bl	80006c0 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8000660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000664:	461a      	mov	r2, r3
 8000666:	68b9      	ldr	r1, [r7, #8]
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f000 f899 	bl	80007a0 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af02      	add	r7, sp, #8
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8000690:	2319      	movs	r3, #25
 8000692:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000698:	bf00      	nop
 800069a:	7cfb      	ldrb	r3, [r7, #19]
 800069c:	b299      	uxth	r1, r3
 800069e:	f107 0210 	add.w	r2, r7, #16
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2302      	movs	r3, #2
 80006aa:	6978      	ldr	r0, [r7, #20]
 80006ac:	f000 fed4 	bl	8001458 <HAL_I2C_Master_Transmit>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f1      	bne.n	800069a <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	4613      	mov	r3, r2
 80006cc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80006d8:	231c      	movs	r3, #28
 80006da:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80006dc:	bf00      	nop
 80006de:	7cfb      	ldrb	r3, [r7, #19]
 80006e0:	b299      	uxth	r1, r3
 80006e2:	f107 0211 	add.w	r2, r7, #17
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	6978      	ldr	r0, [r7, #20]
 80006f0:	f000 feb2 	bl	8001458 <HAL_I2C_Master_Transmit>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f1      	bne.n	80006de <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80006fa:	bf00      	nop
 80006fc:	7cfb      	ldrb	r3, [r7, #19]
 80006fe:	b299      	uxth	r1, r3
 8000700:	f107 0212 	add.w	r2, r7, #18
 8000704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	6978      	ldr	r0, [r7, #20]
 800070e:	f000 ff97 	bl	8001640 <HAL_I2C_Master_Receive>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f1      	bne.n	80006fc <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8000718:	7cbb      	ldrb	r3, [r7, #18]
 800071a:	b25b      	sxtb	r3, r3
 800071c:	f023 0318 	bic.w	r3, r3, #24
 8000720:	b25a      	sxtb	r2, r3
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8000730:	bf00      	nop
 8000732:	7cfb      	ldrb	r3, [r7, #19]
 8000734:	b299      	uxth	r1, r3
 8000736:	f107 0212 	add.w	r2, r7, #18
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f000 fe88 	bl	8001458 <HAL_I2C_Master_Transmit>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f1      	bne.n	8000732 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d81f      	bhi.n	8000794 <SD_MPU6050_SetAccelerometer+0xd4>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <SD_MPU6050_SetAccelerometer+0x9c>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	0800076d 	.word	0x0800076d
 8000760:	08000777 	.word	0x08000777
 8000764:	08000781 	.word	0x08000781
 8000768:	0800078b 	.word	0x0800078b
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8000772:	609a      	str	r2, [r3, #8]
			break;
 8000774:	e00f      	b.n	8000796 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800077c:	609a      	str	r2, [r3, #8]
			break;
 800077e:	e00a      	b.n	8000796 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8000786:	609a      	str	r2, [r3, #8]
			break;
 8000788:	e005      	b.n	8000796 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8000790:	609a      	str	r2, [r3, #8]
			break;
 8000792:	e000      	b.n	8000796 <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8000794:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80007b8:	231b      	movs	r3, #27
 80007ba:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80007bc:	bf00      	nop
 80007be:	7cfb      	ldrb	r3, [r7, #19]
 80007c0:	b299      	uxth	r1, r3
 80007c2:	f107 0211 	add.w	r2, r7, #17
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f000 fe42 	bl	8001458 <HAL_I2C_Master_Transmit>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f1      	bne.n	80007be <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80007da:	bf00      	nop
 80007dc:	7cfb      	ldrb	r3, [r7, #19]
 80007de:	b299      	uxth	r1, r3
 80007e0:	f107 0212 	add.w	r2, r7, #18
 80007e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	6978      	ldr	r0, [r7, #20]
 80007ee:	f000 ff27 	bl	8001640 <HAL_I2C_Master_Receive>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f1      	bne.n	80007dc <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 80007f8:	7cbb      	ldrb	r3, [r7, #18]
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	f023 0318 	bic.w	r3, r3, #24
 8000800:	b25a      	sxtb	r2, r3
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b25b      	sxtb	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8000810:	bf00      	nop
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	b299      	uxth	r1, r3
 8000816:	f107 0212 	add.w	r2, r7, #18
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f000 fe18 	bl	8001458 <HAL_I2C_Master_Transmit>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f1      	bne.n	8000812 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b03      	cmp	r3, #3
 8000832:	d81b      	bhi.n	800086c <SD_MPU6050_SetGyroscope+0xcc>
 8000834:	a201      	add	r2, pc, #4	; (adr r2, 800083c <SD_MPU6050_SetGyroscope+0x9c>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	0800084d 	.word	0x0800084d
 8000840:	08000855 	.word	0x08000855
 8000844:	0800085d 	.word	0x0800085d
 8000848:	08000865 	.word	0x08000865
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <SD_MPU6050_SetGyroscope+0xd8>)
 8000850:	605a      	str	r2, [r3, #4]
				break;
 8000852:	e00c      	b.n	800086e <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <SD_MPU6050_SetGyroscope+0xdc>)
 8000858:	605a      	str	r2, [r3, #4]
				break;
 800085a:	e008      	b.n	800086e <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <SD_MPU6050_SetGyroscope+0xe0>)
 8000860:	605a      	str	r2, [r3, #4]
				break;
 8000862:	e004      	b.n	800086e <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <SD_MPU6050_SetGyroscope+0xe4>)
 8000868:	605a      	str	r2, [r3, #4]
				break;
 800086a:	e000      	b.n	800086e <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 800086c:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	3bfa232d 	.word	0x3bfa232d
 800087c:	3c7a232d 	.word	0x3c7a232d
 8000880:	3cf9c190 	.word	0x3cf9c190
 8000884:	3d79c190 	.word	0x3d79c190

08000888 <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af02      	add	r7, sp, #8
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8000892:	233b      	movs	r3, #59	; 0x3b
 8000894:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80008a0:	bf00      	nop
 80008a2:	7cfb      	ldrb	r3, [r7, #19]
 80008a4:	b299      	uxth	r1, r3
 80008a6:	f107 020b 	add.w	r2, r7, #11
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2301      	movs	r3, #1
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f000 fdd0 	bl	8001458 <HAL_I2C_Master_Transmit>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f1      	bne.n	80008a2 <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80008be:	bf00      	nop
 80008c0:	7cfb      	ldrb	r3, [r7, #19]
 80008c2:	b299      	uxth	r1, r3
 80008c4:	f107 020c 	add.w	r2, r7, #12
 80008c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2306      	movs	r3, #6
 80008d0:	6978      	ldr	r0, [r7, #20]
 80008d2:	f000 feb5 	bl	8001640 <HAL_I2C_Master_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f1      	bne.n	80008c0 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 80008dc:	7b3b      	ldrb	r3, [r7, #12]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8000900:	7c3b      	ldrb	r3, [r7, #16]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21a      	sxth	r2, r3
 8000906:	7c7b      	ldrb	r3, [r7, #17]
 8000908:	b21b      	sxth	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b21a      	sxth	r2, r3
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af02      	add	r7, sp, #8
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8000926:	2343      	movs	r3, #67	; 0x43
 8000928:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8000934:	bf00      	nop
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	b299      	uxth	r1, r3
 800093a:	f107 020b 	add.w	r2, r7, #11
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f000 fd86 	bl	8001458 <HAL_I2C_Master_Transmit>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1f1      	bne.n	8000936 <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8000952:	bf00      	nop
 8000954:	7cfb      	ldrb	r3, [r7, #19]
 8000956:	b299      	uxth	r1, r3
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2306      	movs	r3, #6
 8000964:	6978      	ldr	r0, [r7, #20]
 8000966:	f000 fe6b 	bl	8001640 <HAL_I2C_Master_Receive>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1f1      	bne.n	8000954 <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8000970:	7b3b      	ldrb	r3, [r7, #12]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21a      	sxth	r2, r3
 8000976:	7b7b      	ldrb	r3, [r7, #13]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21a      	sxth	r2, r3
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	b21a      	sxth	r2, r3
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	b21b      	sxth	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b21a      	sxth	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8000994:	7c3b      	ldrb	r3, [r7, #16]
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	b21a      	sxth	r2, r3
 800099a:	7c7b      	ldrb	r3, [r7, #17]
 800099c:	b21b      	sxth	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SD_MPU6050_ReadTemperature>:
SD_MPU6050_Result SD_MPU6050_ReadTemperature(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	uint8_t data[2];
	int16_t temp;
	uint8_t reg = MPU6050_TEMP_OUT_H;
 80009ba:	2341      	movs	r3, #65	; 0x41
 80009bc:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	74fb      	strb	r3, [r7, #19]

	/* Read temperature */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80009c8:	bf00      	nop
 80009ca:	7cfb      	ldrb	r3, [r7, #19]
 80009cc:	b299      	uxth	r1, r3
 80009ce:	f107 020b 	add.w	r2, r7, #11
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f000 fd3c 	bl	8001458 <HAL_I2C_Master_Transmit>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1f1      	bne.n	80009ca <SD_MPU6050_ReadTemperature+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 2, 1000) != HAL_OK);
 80009e6:	bf00      	nop
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	b299      	uxth	r1, r3
 80009ec:	f107 020c 	add.w	r2, r7, #12
 80009f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2302      	movs	r3, #2
 80009f8:	6978      	ldr	r0, [r7, #20]
 80009fa:	f000 fe21 	bl	8001640 <HAL_I2C_Master_Receive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f1      	bne.n	80009e8 <SD_MPU6050_ReadTemperature+0x38>

	/* Format temperature */
	temp = (data[0] << 8 | data[1]);
 8000a04:	7b3b      	ldrb	r3, [r7, #12]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	7b7b      	ldrb	r3, [r7, #13]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	823b      	strh	r3, [r7, #16]
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8000a12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000a40 <SD_MPU6050_ReadTemperature+0x90>
 8000a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a26:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000a44 <SD_MPU6050_ReadTemperature+0x94>
 8000a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	43aa0000 	.word	0x43aa0000
 8000a44:	42121eb8 	.word	0x42121eb8

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x44>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x44>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x44>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_I2C_MspInit+0x7c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d127      	bne.n	8000b02 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aca:	23c0      	movs	r3, #192	; 0xc0
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <HAL_I2C_MspInit+0x84>)
 8000ae6:	f000 fab5 	bl	8001054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000400 	.word	0x48000400

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d129      	bne.n	8000b8e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b6a:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f000 fa63 	bl	8001054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f906 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e00a      	b.n	8000c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c0e:	f3af 8000 	nop.w
 8000c12:	4601      	mov	r1, r0
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	b2ca      	uxtb	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbf0      	blt.n	8000c0e <_read+0x12>
	}

return len;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_isatty>:

int _isatty(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return 1;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x50>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x16>
		heap_end = &end;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <_sbrk+0x50>)
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <_sbrk+0x54>)
 8000cb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <_sbrk+0x50>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <_sbrk+0x50>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	466a      	mov	r2, sp
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d907      	bls.n	8000cda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cca:	f002 ff59 	bl	8003b80 <__errno>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cd8:	e006      	b.n	8000ce8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <_sbrk+0x50>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <_sbrk+0x50>)
 8000ce4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000008c 	.word	0x2000008c
 8000cf4:	20000188 	.word	0x20000188

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <SystemInit+0x28>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <SystemInit+0x28>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SystemInit+0x28>)
 8000d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d12:	609a      	str	r2, [r3, #8]
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d2a:	e003      	b.n	8000d34 <LoopCopyDataInit>

08000d2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d32:	3104      	adds	r1, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d3c:	d3f6      	bcc.n	8000d2c <CopyDataInit>
	ldr	r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d40:	e002      	b.n	8000d48 <LoopFillZerobss>

08000d42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d44:	f842 3b04 	str.w	r3, [r2], #4

08000d48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <LoopForever+0x16>)
	cmp	r2, r3
 8000d4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d4c:	d3f9      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d4e:	f7ff ffd3 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f002 ff1b 	bl	8003b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d56:	f7ff fa8b 	bl	8000270 <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d5c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000d60:	08004d5c 	.word	0x08004d5c
	ldr	r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d68:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000d6c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000d70:	20000188 	.word	0x20000188

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f92f 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe58 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f939 	bl	800103a <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de0:	f000 f90f 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000180 	.word	0x20000180

08000e2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000180 	.word	0x20000180

08000e44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_Delay+0x40>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff47 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff5c 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffb0 	bl	8000fa8 <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	e14e      	b.n	8001302 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8140 	beq.w	80012fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x38>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b12      	cmp	r3, #18
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	6939      	ldr	r1, [r7, #16]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d00b      	beq.n	8001128 <HAL_GPIO_Init+0xd4>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800111c:	2b11      	cmp	r3, #17
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b12      	cmp	r3, #18
 8001126:	d130      	bne.n	800118a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115e:	2201      	movs	r2, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f003 0201 	and.w	r2, r3, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 809a 	beq.w	80012fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c8:	4b55      	ldr	r3, [pc, #340]	; (8001320 <HAL_GPIO_Init+0x2cc>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a54      	ldr	r2, [pc, #336]	; (8001320 <HAL_GPIO_Init+0x2cc>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b52      	ldr	r3, [pc, #328]	; (8001320 <HAL_GPIO_Init+0x2cc>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e0:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1e0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a46      	ldr	r2, [pc, #280]	; (8001328 <HAL_GPIO_Init+0x2d4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1dc>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a45      	ldr	r2, [pc, #276]	; (800132c <HAL_GPIO_Init+0x2d8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1d8>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a44      	ldr	r2, [pc, #272]	; (8001330 <HAL_GPIO_Init+0x2dc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1d4>
 8001224:	2303      	movs	r3, #3
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1e2>
 8001228:	2305      	movs	r3, #5
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x1e2>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x1e2>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x1e2>
 8001234:	2300      	movs	r3, #0
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001246:	4937      	ldr	r1, [pc, #220]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001278:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a2:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x2e0>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f aea9 	bne.w	8001064 <HAL_GPIO_Init+0x10>
  }
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e081      	b.n	800144e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fb96 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001388:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001398:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e006      	b.n	80013c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d104      	bne.n	80013d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	ea42 0103 	orr.w	r1, r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	021a      	lsls	r2, r3, #8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69d9      	ldr	r1, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2220      	movs	r2, #32
 800143a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	461a      	mov	r2, r3
 8001464:	460b      	mov	r3, r1
 8001466:	817b      	strh	r3, [r7, #10]
 8001468:	4613      	mov	r3, r2
 800146a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b20      	cmp	r3, #32
 8001476:	f040 80da 	bne.w	800162e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_I2C_Master_Transmit+0x30>
 8001484:	2302      	movs	r3, #2
 8001486:	e0d3      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001490:	f7ff fccc 	bl	8000e2c <HAL_GetTick>
 8001494:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2319      	movs	r3, #25
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 faed 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0be      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2221      	movs	r2, #33	; 0x21
 80014b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	893a      	ldrh	r2, [r7, #8]
 80014d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2bff      	cmp	r3, #255	; 0xff
 80014e2:	d90e      	bls.n	8001502 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	22ff      	movs	r2, #255	; 0xff
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	8979      	ldrh	r1, [r7, #10]
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <HAL_I2C_Master_Transmit+0x1e0>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 fc50 	bl	8001da0 <I2C_TransferConfig>
 8001500:	e06c      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	b2da      	uxtb	r2, r3
 8001512:	8979      	ldrh	r1, [r7, #10]
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <HAL_I2C_Master_Transmit+0x1e0>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 fc3f 	bl	8001da0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001522:	e05b      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 faea 	bl	8001b02 <I2C_WaitOnTXISFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e07b      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d034      	beq.n	80015dc <HAL_I2C_Master_Transmit+0x184>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d130      	bne.n	80015dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 fa7c 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e04d      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d90e      	bls.n	80015bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	8979      	ldrh	r1, [r7, #10]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fbf3 	bl	8001da0 <I2C_TransferConfig>
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	8979      	ldrh	r1, [r7, #10]
 80015ce:	2300      	movs	r3, #0
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fbe2 	bl	8001da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d19e      	bne.n	8001524 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fac9 	bl	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e01a      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_I2C_Master_Transmit+0x1e4>)
 800160e:	400b      	ands	r3, r1
 8001610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	80002000 	.word	0x80002000
 800163c:	fe00e800 	.word	0xfe00e800

08001640 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 80db 	bne.w	8001818 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_I2C_Master_Receive+0x30>
 800166c:	2302      	movs	r3, #2
 800166e:	e0d4      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001678:	f7ff fbd8 	bl	8000e2c <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2319      	movs	r3, #25
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f9f9 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0bf      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2222      	movs	r2, #34	; 0x22
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2210      	movs	r2, #16
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	893a      	ldrh	r2, [r7, #8]
 80016ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d90e      	bls.n	80016ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	4b52      	ldr	r3, [pc, #328]	; (8001824 <HAL_I2C_Master_Receive+0x1e4>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fb5c 	bl	8001da0 <I2C_TransferConfig>
 80016e8:	e06d      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	8979      	ldrh	r1, [r7, #10]
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_I2C_Master_Receive+0x1e4>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fb4b 	bl	8001da0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800170a:	e05c      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6a39      	ldr	r1, [r7, #32]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fa73 	bl	8001bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e07c      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d034      	beq.n	80017c6 <HAL_I2C_Master_Receive+0x186>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d130      	bne.n	80017c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f987 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e04d      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d90e      	bls.n	80017a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	22ff      	movs	r2, #255	; 0xff
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fafe 	bl	8001da0 <I2C_TransferConfig>
 80017a4:	e00f      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	8979      	ldrh	r1, [r7, #10]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 faed 	bl	8001da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d19d      	bne.n	800170c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	6a39      	ldr	r1, [r7, #32]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f9d4 	bl	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2220      	movs	r2, #32
 80017ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_I2C_Master_Receive+0x1e8>)
 80017f8:	400b      	ands	r3, r1
 80017fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	80002400 	.word	0x80002400
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b20      	cmp	r3, #32
 800184a:	f040 80f1 	bne.w	8001a30 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800185c:	d101      	bne.n	8001862 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	e0e7      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_I2C_IsDeviceReady+0x44>
 800186c:	2302      	movs	r3, #2
 800186e:	e0e0      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_I2C_IsDeviceReady+0x72>
 800188e:	897b      	ldrh	r3, [r7, #10]
 8001890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800189c:	e004      	b.n	80018a8 <HAL_I2C_IsDeviceReady+0x7c>
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80018ae:	f7ff fabd 	bl	8000e2c <HAL_GetTick>
 80018b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b20      	cmp	r3, #32
 80018c0:	bf0c      	ite	eq
 80018c2:	2301      	moveq	r3, #1
 80018c4:	2300      	movne	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018e0:	e034      	b.n	800194c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018e8:	d01a      	beq.n	8001920 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018ea:	f7ff fa9f 	bl	8000e2c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d302      	bcc.n	8001900 <HAL_I2C_IsDeviceReady+0xd4>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e088      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b20      	cmp	r3, #32
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b10      	cmp	r3, #16
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800194c:	7ffb      	ldrb	r3, [r7, #31]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_I2C_IsDeviceReady+0x12c>
 8001952:	7fbb      	ldrb	r3, [r7, #30]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0c4      	beq.n	80018e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b10      	cmp	r3, #16
 8001964:	d01a      	beq.n	800199c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	2120      	movs	r1, #32
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f886 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e058      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2220      	movs	r2, #32
 8001986:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e04a      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2200      	movs	r2, #0
 80019a4:	2120      	movs	r1, #32
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f86b 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e03d      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2210      	movs	r2, #16
 80019bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2220      	movs	r2, #32
 80019c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d118      	bne.n	8001a00 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	2120      	movs	r1, #32
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 f84a 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e01c      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2220      	movs	r2, #32
 80019fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	f63f af3b 	bhi.w	8001886 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d103      	bne.n	8001a58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d007      	beq.n	8001a76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	619a      	str	r2, [r3, #24]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a92:	e022      	b.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a9a:	d01e      	beq.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9c:	f7ff f9c6 	bl	8000e2c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d302      	bcc.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d113      	bne.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f043 0220 	orr.w	r2, r3, #32
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	bf0c      	ite	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	2300      	movne	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d0cd      	beq.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b0e:	e02c      	b.n	8001b6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f8dd 	bl	8001cd4 <I2C_IsAcknowledgeFailed>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e02a      	b.n	8001b7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b2a:	d01e      	beq.n	8001b6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2c:	f7ff f97e 	bl	8000e2c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d302      	bcc.n	8001b42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d113      	bne.n	8001b6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0220 	orr.w	r2, r3, #32
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e007      	b.n	8001b7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d1cb      	bne.n	8001b10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b8e:	e028      	b.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f89d 	bl	8001cd4 <I2C_IsAcknowledgeFailed>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e026      	b.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff f942 	bl	8000e2c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d113      	bne.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d1cf      	bne.n	8001b90 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c08:	e055      	b.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f860 	bl	8001cd4 <I2C_IsAcknowledgeFailed>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e053      	b.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d129      	bne.n	8001c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d105      	bne.n	8001c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e03f      	b.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e022      	b.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c80:	f7ff f8d4 	bl	8000e2c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d302      	bcc.n	8001c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f043 0220 	orr.w	r2, r3, #32
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e007      	b.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d1a2      	bne.n	8001c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	fe00e800 	.word	0xfe00e800

08001cd4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d151      	bne.n	8001d92 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cee:	e022      	b.n	8001d36 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf6:	d01e      	beq.n	8001d36 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf8:	f7ff f898 	bl	8000e2c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d302      	bcc.n	8001d0e <I2C_IsAcknowledgeFailed+0x3a>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d113      	bne.n	8001d36 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f043 0220 	orr.w	r2, r3, #32
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e02e      	b.n	8001d94 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d1d5      	bne.n	8001cf0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2210      	movs	r2, #16
 8001d4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2220      	movs	r2, #32
 8001d52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fe70 	bl	8001a3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <I2C_IsAcknowledgeFailed+0xc8>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	fe00e800 	.word	0xfe00e800

08001da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	817b      	strh	r3, [r7, #10]
 8001dae:	4613      	mov	r3, r2
 8001db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	0d5b      	lsrs	r3, r3, #21
 8001dbc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <I2C_TransferConfig+0x58>)
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	ea02 0103 	and.w	r1, r2, r3
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dd0:	7a7b      	ldrb	r3, [r7, #9]
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	03ff63ff 	.word	0x03ff63ff

08001dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d138      	bne.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e032      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2224      	movs	r2, #36	; 0x24
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d139      	bne.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e033      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2224      	movs	r2, #36	; 0x24
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f000 bef4 	b.w	8002d2e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 816a 	beq.w	800222a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f56:	4bb3      	ldr	r3, [pc, #716]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d00c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f62:	4bb0      	ldr	r3, [pc, #704]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d159      	bne.n	8002022 <HAL_RCC_OscConfig+0xf6>
 8001f6e:	4bad      	ldr	r3, [pc, #692]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7a:	d152      	bne.n	8002022 <HAL_RCC_OscConfig+0xf6>
 8001f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f80:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_OscConfig+0x82>
 8001fa8:	4b9e      	ldr	r3, [pc, #632]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e015      	b.n	8001fda <HAL_RCC_OscConfig+0xae>
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001fd6:	4b93      	ldr	r3, [pc, #588]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fde:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001fe2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fe6:	fa92 f2a2 	rbit	r2, r2
 8001fea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001fee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ff2:	fab2 f282 	clz	r2, r2
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f042 0220 	orr.w	r2, r2, #32
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 021f 	and.w	r2, r2, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 810c 	beq.w	8002228 <HAL_RCC_OscConfig+0x2fc>
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8106 	bne.w	8002228 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	f000 be86 	b.w	8002d2e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d106      	bne.n	800203c <HAL_RCC_OscConfig+0x110>
 800202e:	4b7d      	ldr	r3, [pc, #500]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7c      	ldr	r2, [pc, #496]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e030      	b.n	800209e <HAL_RCC_OscConfig+0x172>
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x134>
 8002046:	4b77      	ldr	r3, [pc, #476]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a76      	ldr	r2, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b74      	ldr	r3, [pc, #464]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a73      	ldr	r2, [pc, #460]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01e      	b.n	800209e <HAL_RCC_OscConfig+0x172>
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_OscConfig+0x15a>
 800206c:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6c      	ldr	r2, [pc, #432]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a69      	ldr	r2, [pc, #420]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e00b      	b.n	800209e <HAL_RCC_OscConfig+0x172>
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a66      	ldr	r2, [pc, #408]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b64      	ldr	r3, [pc, #400]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a63      	ldr	r2, [pc, #396]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4b61      	ldr	r3, [pc, #388]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	f023 020f 	bic.w	r2, r3, #15
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	495d      	ldr	r1, [pc, #372]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d059      	beq.n	8002170 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe feb6 	bl	8000e2c <HAL_GetTick>
 80020c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c6:	f7fe feb1 	bl	8000e2c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d902      	bls.n	80020dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	f000 be29 	b.w	8002d2e <HAL_RCC_OscConfig+0xe02>
 80020dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0x1e2>
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x20e>
 800210e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002112:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002126:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800212a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800213e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002142:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002146:	fa92 f2a2 	rbit	r2, r2
 800214a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800214e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f042 0220 	orr.w	r2, r2, #32
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f002 021f 	and.w	r2, r2, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0ab      	beq.n	80020c6 <HAL_RCC_OscConfig+0x19a>
 800216e:	e05c      	b.n	800222a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fe5c 	bl	8000e2c <HAL_GetTick>
 8002174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217a:	f7fe fe57 	bl	8000e2c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d902      	bls.n	8002190 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	f000 bdcf 	b.w	8002d2e <HAL_RCC_OscConfig+0xe02>
 8002190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002194:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d102      	bne.n	80021c2 <HAL_RCC_OscConfig+0x296>
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x2c2>
 80021c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_RCC_OscConfig+0x2f8>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021fa:	fa92 f2a2 	rbit	r2, r2
 80021fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002202:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f042 0220 	orr.w	r2, r2, #32
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f002 021f 	and.w	r2, r2, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ab      	bne.n	800217a <HAL_RCC_OscConfig+0x24e>
 8002222:	e002      	b.n	800222a <HAL_RCC_OscConfig+0x2fe>
 8002224:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 816f 	beq.w	8002518 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800223a:	4bd0      	ldr	r3, [pc, #832]	; (800257c <HAL_RCC_OscConfig+0x650>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002246:	4bcd      	ldr	r3, [pc, #820]	; (800257c <HAL_RCC_OscConfig+0x650>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d16c      	bne.n	800232c <HAL_RCC_OscConfig+0x400>
 8002252:	4bca      	ldr	r3, [pc, #808]	; (800257c <HAL_RCC_OscConfig+0x650>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d166      	bne.n	800232c <HAL_RCC_OscConfig+0x400>
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002270:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d102      	bne.n	800228e <HAL_RCC_OscConfig+0x362>
 8002288:	4bbc      	ldr	r3, [pc, #752]	; (800257c <HAL_RCC_OscConfig+0x650>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	e013      	b.n	80022b6 <HAL_RCC_OscConfig+0x38a>
 800228e:	2302      	movs	r3, #2
 8002290:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022a0:	2302      	movs	r3, #2
 80022a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80022b2:	4bb2      	ldr	r3, [pc, #712]	; (800257c <HAL_RCC_OscConfig+0x650>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2202      	movs	r2, #2
 80022b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80022bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80022c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80022cc:	fab2 f282 	clz	r2, r2
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f042 0220 	orr.w	r2, r2, #32
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f002 021f 	and.w	r2, r2, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f000 bd1b 	b.w	8002d2e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4ba0      	ldr	r3, [pc, #640]	; (800257c <HAL_RCC_OscConfig+0x650>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	21f8      	movs	r1, #248	; 0xf8
 8002308:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002310:	fa91 f1a1 	rbit	r1, r1
 8002314:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002318:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800231c:	fab1 f181 	clz	r1, r1
 8002320:	b2c9      	uxtb	r1, r1
 8002322:	408b      	lsls	r3, r1
 8002324:	4995      	ldr	r1, [pc, #596]	; (800257c <HAL_RCC_OscConfig+0x650>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	e0f5      	b.n	8002518 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8085 	beq.w	8002442 <HAL_RCC_OscConfig+0x516>
 8002338:	2301      	movs	r3, #1
 800233a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800234a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002358:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	461a      	mov	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fd62 	bl	8000e2c <HAL_GetTick>
 8002368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7fe fd5d 	bl	8000e2c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	f000 bcd5 	b.w	8002d2e <HAL_RCC_OscConfig+0xe02>
 8002384:	2302      	movs	r3, #2
 8002386:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002396:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0x488>
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x650>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e013      	b.n	80023dc <HAL_RCC_OscConfig+0x4b0>
 80023b4:	2302      	movs	r3, #2
 80023b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x650>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	2202      	movs	r2, #2
 80023de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80023e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023e6:	fa92 f2a2 	rbit	r2, r2
 80023ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023f2:	fab2 f282 	clz	r2, r2
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f042 0220 	orr.w	r2, r2, #32
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f002 021f 	and.w	r2, r2, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f202 	lsl.w	r2, r1, r2
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0af      	beq.n	800236e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_OscConfig+0x650>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	21f8      	movs	r1, #248	; 0xf8
 800241e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002426:	fa91 f1a1 	rbit	r1, r1
 800242a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800242e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002432:	fab1 f181 	clz	r1, r1
 8002436:	b2c9      	uxtb	r1, r1
 8002438:	408b      	lsls	r3, r1
 800243a:	4950      	ldr	r1, [pc, #320]	; (800257c <HAL_RCC_OscConfig+0x650>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e06a      	b.n	8002518 <HAL_RCC_OscConfig+0x5ec>
 8002442:	2301      	movs	r3, #1
 8002444:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002454:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	461a      	mov	r2, r3
 800246a:	2300      	movs	r3, #0
 800246c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fcdd 	bl	8000e2c <HAL_GetTick>
 8002472:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002478:	f7fe fcd8 	bl	8000e2c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d902      	bls.n	800248e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	f000 bc50 	b.w	8002d2e <HAL_RCC_OscConfig+0xe02>
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80024a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <HAL_RCC_OscConfig+0x592>
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCC_OscConfig+0x650>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	e013      	b.n	80024e6 <HAL_RCC_OscConfig+0x5ba>
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_RCC_OscConfig+0x650>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2202      	movs	r2, #2
 80024e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024f0:	fa92 f2a2 	rbit	r2, r2
 80024f4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024fc:	fab2 f282 	clz	r2, r2
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f042 0220 	orr.w	r2, r2, #32
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	f002 021f 	and.w	r2, r2, #31
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f202 	lsl.w	r2, r1, r2
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1af      	bne.n	8002478 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80da 	beq.w	80026dc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d069      	beq.n	8002606 <HAL_RCC_OscConfig+0x6da>
 8002532:	2301      	movs	r3, #1
 8002534:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x654>)
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	461a      	mov	r2, r3
 8002558:	2301      	movs	r3, #1
 800255a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe fc66 	bl	8000e2c <HAL_GetTick>
 8002560:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002564:	e00e      	b.n	8002584 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fc61 	bl	8000e2c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d906      	bls.n	8002584 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e3d9      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	10908120 	.word	0x10908120
 8002584:	2302      	movs	r3, #2
 8002586:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002596:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80025c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	4ba5      	ldr	r3, [pc, #660]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80025c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025ce:	2102      	movs	r1, #2
 80025d0:	6019      	str	r1, [r3, #0]
 80025d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f1a3 	rbit	r1, r3
 80025dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025e0:	6019      	str	r1, [r3, #0]
  return result;
 80025e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0b0      	beq.n	8002566 <HAL_RCC_OscConfig+0x63a>
 8002604:	e06a      	b.n	80026dc <HAL_RCC_OscConfig+0x7b0>
 8002606:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800261c:	601a      	str	r2, [r3, #0]
  return result;
 800261e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002622:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x934>)
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe fbf8 	bl	8000e2c <HAL_GetTick>
 800263c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e009      	b.n	8002656 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe fbf3 	bl	8000e2c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e36b      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
 8002656:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800265a:	2202      	movs	r2, #2
 800265c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002672:	2202      	movs	r2, #2
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800269c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269e:	4b6f      	ldr	r3, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80026a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80026a6:	2102      	movs	r1, #2
 80026a8:	6019      	str	r1, [r3, #0]
 80026aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	fa93 f1a3 	rbit	r1, r3
 80026b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026b8:	6019      	str	r1, [r3, #0]
  return result;
 80026ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1b2      	bne.n	8002642 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8158 	beq.w	800299c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f2:	4b5a      	ldr	r3, [pc, #360]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b57      	ldr	r3, [pc, #348]	; (800285c <HAL_RCC_OscConfig+0x930>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a56      	ldr	r2, [pc, #344]	; (800285c <HAL_RCC_OscConfig+0x930>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]
 800270a:	4b54      	ldr	r3, [pc, #336]	; (800285c <HAL_RCC_OscConfig+0x930>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f107 0308 	add.w	r3, r7, #8
 800271c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_RCC_OscConfig+0x938>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11a      	bne.n	8002766 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002730:	4b4c      	ldr	r3, [pc, #304]	; (8002864 <HAL_RCC_OscConfig+0x938>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a4b      	ldr	r2, [pc, #300]	; (8002864 <HAL_RCC_OscConfig+0x938>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273c:	f7fe fb76 	bl	8000e2c <HAL_GetTick>
 8002740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e009      	b.n	800275a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7fe fb71 	bl	8000e2c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e2e9      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b42      	ldr	r3, [pc, #264]	; (8002864 <HAL_RCC_OscConfig+0x938>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ef      	beq.n	8002746 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x852>
 8002770:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_RCC_OscConfig+0x930>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4a39      	ldr	r2, [pc, #228]	; (800285c <HAL_RCC_OscConfig+0x930>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	e02f      	b.n	80027de <HAL_RCC_OscConfig+0x8b2>
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x876>
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x930>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a33      	ldr	r2, [pc, #204]	; (800285c <HAL_RCC_OscConfig+0x930>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0x930>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_RCC_OscConfig+0x930>)
 800279a:	f023 0304 	bic.w	r3, r3, #4
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	e01d      	b.n	80027de <HAL_RCC_OscConfig+0x8b2>
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x89a>
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x8b2>
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a24      	ldr	r2, [pc, #144]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a21      	ldr	r2, [pc, #132]	; (800285c <HAL_RCC_OscConfig+0x930>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d06b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe fb20 	bl	8000e2c <HAL_GetTick>
 80027ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fb1b 	bl	8000e2c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e291      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
 800280a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800280e:	2202      	movs	r2, #2
 8002810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002826:	2202      	movs	r2, #2
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002838:	601a      	str	r2, [r3, #0]
  return result;
 800283a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800283e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d109      	bne.n	8002868 <HAL_RCC_OscConfig+0x93c>
 8002854:	4b01      	ldr	r3, [pc, #4]	; (800285c <HAL_RCC_OscConfig+0x930>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x958>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	10908120 	.word	0x10908120
 8002864:	40007000 	.word	0x40007000
 8002868:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	4bbb      	ldr	r3, [pc, #748]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002888:	2102      	movs	r1, #2
 800288a:	6011      	str	r1, [r2, #0]
 800288c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	fa92 f1a2 	rbit	r1, r2
 8002896:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800289a:	6011      	str	r1, [r2, #0]
  return result;
 800289c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d099      	beq.n	80027f2 <HAL_RCC_OscConfig+0x8c6>
 80028be:	e063      	b.n	8002988 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c0:	f7fe fab4 	bl	8000e2c <HAL_GetTick>
 80028c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	e00b      	b.n	80028e2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe faaf 	bl	8000e2c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e225      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
 80028e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028e6:	2202      	movs	r2, #2
 80028e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028fe:	2202      	movs	r2, #2
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002910:	601a      	str	r2, [r3, #0]
  return result;
 8002912:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002916:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d102      	bne.n	8002932 <HAL_RCC_OscConfig+0xa06>
 800292c:	4b90      	ldr	r3, [pc, #576]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	e00d      	b.n	800294e <HAL_RCC_OscConfig+0xa22>
 8002932:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002936:	2202      	movs	r2, #2
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	4b89      	ldr	r3, [pc, #548]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002952:	2102      	movs	r1, #2
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1a0      	bne.n	80028ca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002988:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b77      	ldr	r3, [pc, #476]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4a76      	ldr	r2, [pc, #472]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 81c2 	beq.w	8002d2c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a8:	4b71      	ldr	r3, [pc, #452]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	f000 819c 	beq.w	8002cee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	f040 8114 	bne.w	8002bea <HAL_RCC_OscConfig+0xcbe>
 80029c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	fa93 f2a3 	rbit	r2, r3
 80029d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029da:	601a      	str	r2, [r3, #0]
  return result;
 80029dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	461a      	mov	r2, r3
 80029f4:	2300      	movs	r3, #0
 80029f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fa18 	bl	8000e2c <HAL_GetTick>
 80029fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe fa13 	bl	8000e2c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e18b      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
 8002a16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_RCC_OscConfig+0xb24>
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e01b      	b.n	8002a88 <HAL_RCC_OscConfig+0xb5c>
 8002a50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a90:	6011      	str	r1, [r2, #0]
 8002a92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fa92 f1a2 	rbit	r1, r2
 8002a9c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002aa0:	6011      	str	r1, [r2, #0]
  return result;
 8002aa2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f042 0220 	orr.w	r2, r2, #32
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f002 021f 	and.w	r2, r2, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f202 	lsl.w	r2, r1, r2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d19e      	bne.n	8002a02 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	4925      	ldr	r1, [pc, #148]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
 8002ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	fa93 f2a3 	rbit	r2, r3
 8002af4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002af8:	601a      	str	r2, [r3, #0]
  return result;
 8002afa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002afe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	461a      	mov	r2, r3
 8002b12:	2301      	movs	r3, #1
 8002b14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe f989 	bl	8000e2c <HAL_GetTick>
 8002b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1e:	e009      	b.n	8002b34 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe f984 	bl	8000e2c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0fc      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
 8002b34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b4c:	601a      	str	r2, [r3, #0]
  return result;
 8002b4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0xc48>
 8002b68:	4b01      	ldr	r3, [pc, #4]	; (8002b70 <HAL_RCC_OscConfig+0xc44>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	e01e      	b.n	8002bac <HAL_RCC_OscConfig+0xc80>
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_OscConfig+0xe0c>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002bb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bb4:	6011      	str	r1, [r2, #0]
 8002bb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	fa92 f1a2 	rbit	r1, r2
 8002bc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002bc4:	6011      	str	r1, [r2, #0]
  return result;
 8002bc6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f002 021f 	and.w	r2, r2, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d09b      	beq.n	8002b20 <HAL_RCC_OscConfig+0xbf4>
 8002be8:	e0a0      	b.n	8002d2c <HAL_RCC_OscConfig+0xe00>
 8002bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c02:	601a      	str	r2, [r3, #0]
  return result;
 8002c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c08:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe f904 	bl	8000e2c <HAL_GetTick>
 8002c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c28:	e009      	b.n	8002c3e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe f8ff 	bl	8000e2c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e077      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
 8002c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c56:	601a      	str	r2, [r3, #0]
  return result;
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_OscConfig+0xd4c>
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_RCC_OscConfig+0xe0c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	e01b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd84>
 8002c78:	f107 0320 	add.w	r3, r7, #32
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f107 031c 	add.w	r3, r7, #28
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f107 0318 	add.w	r3, r7, #24
 8002c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_OscConfig+0xe0c>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f107 0210 	add.w	r2, r7, #16
 8002cb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	f107 0210 	add.w	r2, r7, #16
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	fa92 f1a2 	rbit	r1, r2
 8002cc4:	f107 020c 	add.w	r2, r7, #12
 8002cc8:	6011      	str	r1, [r2, #0]
  return result;
 8002cca:	f107 020c 	add.w	r2, r7, #12
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	fab2 f282 	clz	r2, r2
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f042 0220 	orr.w	r2, r2, #32
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	f002 021f 	and.w	r2, r2, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d19e      	bne.n	8002c2a <HAL_RCC_OscConfig+0xcfe>
 8002cec:	e01e      	b.n	8002d2c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e018      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_RCC_OscConfig+0xe0c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d04:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b09e      	sub	sp, #120	; 0x78
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e162      	b.n	800301a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b90      	ldr	r3, [pc, #576]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b8d      	ldr	r3, [pc, #564]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	498b      	ldr	r1, [pc, #556]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e14a      	b.n	800301a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	497f      	ldr	r1, [pc, #508]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80dc 	beq.w	8002f68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d13c      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xf6>
 8002db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xa6>
 8002ddc:	4b6f      	ldr	r3, [pc, #444]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	e00f      	b.n	8002e02 <HAL_RCC_ClockConfig+0xc6>
 8002de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	667b      	str	r3, [r7, #100]	; 0x64
 8002df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df4:	663b      	str	r3, [r7, #96]	; 0x60
 8002df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dfe:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e06:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e0a:	fa92 f2a2 	rbit	r2, r2
 8002e0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d17b      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0f3      	b.n	800301a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d13c      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x178>
 8002e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x128>
 8002e5e:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	e00f      	b.n	8002e84 <HAL_RCC_ClockConfig+0x148>
 8002e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	647b      	str	r3, [r7, #68]	; 0x44
 8002e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e76:	643b      	str	r3, [r7, #64]	; 0x40
 8002e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e88:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0220 	orr.w	r2, r2, #32
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d13a      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0b2      	b.n	800301a <HAL_RCC_ClockConfig+0x2de>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d102      	bne.n	8002edc <HAL_RCC_ClockConfig+0x1a0>
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e00d      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1bc>
 8002edc:	2302      	movs	r3, #2
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	2302      	movs	r3, #2
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2202      	movs	r2, #2
 8002efa:	61ba      	str	r2, [r7, #24]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	617a      	str	r2, [r7, #20]
  return result;
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f002 021f 	and.w	r2, r2, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e079      	b.n	800301a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	491a      	ldr	r1, [pc, #104]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7fd ff78 	bl	8000e2c <HAL_GetTick>
 8002f3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fd ff74 	bl	8000e2c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e061      	b.n	800301a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_RCC_ClockConfig+0x260>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d214      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4906      	ldr	r1, [pc, #24]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <HAL_RCC_ClockConfig+0x25c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e040      	b.n	800301a <HAL_RCC_ClockConfig+0x2de>
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCC_ClockConfig+0x2e8>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	491a      	ldr	r1, [pc, #104]	; (8003024 <HAL_RCC_ClockConfig+0x2e8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x2e8>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4912      	ldr	r1, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x2e8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fde:	f000 f829 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4601      	mov	r1, r0
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_RCC_ClockConfig+0x2e8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fec:	22f0      	movs	r2, #240	; 0xf0
 8002fee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	fa92 f2a2 	rbit	r2, r2
 8002ff6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	fab2 f282 	clz	r2, r2
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	40d3      	lsrs	r3, r2
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x2ec>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	fa21 f303 	lsr.w	r3, r1, r3
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <HAL_RCC_ClockConfig+0x2f0>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCC_ClockConfig+0x2f4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fec6 	bl	8000da4 <HAL_InitTick>
  
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3778      	adds	r7, #120	; 0x78
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	08004c84 	.word	0x08004c84
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b08b      	sub	sp, #44	; 0x2c
 8003038:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b04      	cmp	r3, #4
 800305c:	d002      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x30>
 800305e:	2b08      	cmp	r3, #8
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x36>
 8003062:	e03c      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003066:	623b      	str	r3, [r7, #32]
      break;
 8003068:	e03c      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003070:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003074:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	fa92 f2a2 	rbit	r2, r2
 800307c:	607a      	str	r2, [r7, #4]
  return result;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	fab2 f282 	clz	r2, r2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	40d3      	lsrs	r3, r2
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	220f      	movs	r2, #15
 8003098:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	60fa      	str	r2, [r7, #12]
  return result;
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	40d3      	lsrs	r3, r2
 80030ac:	4a14      	ldr	r2, [pc, #80]	; (8003100 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e004      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	623b      	str	r3, [r7, #32]
      break;
 80030dc:	e002      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030e0:	623b      	str	r3, [r7, #32]
      break;
 80030e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	372c      	adds	r7, #44	; 0x2c
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	007a1200 	.word	0x007a1200
 80030fc:	08004c9c 	.word	0x08004c9c
 8003100:	08004cac 	.word	0x08004cac
 8003104:	003d0900 	.word	0x003d0900

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_RCC_GetHCLKFreq+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000000 	.word	0x20000000

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003126:	f7ff ffef 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 800312a:	4601      	mov	r1, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003134:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003138:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	fa92 f2a2 	rbit	r2, r2
 8003140:	603a      	str	r2, [r7, #0]
  return result;
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	fab2 f282 	clz	r2, r2
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	40d3      	lsrs	r3, r2
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x40>)
 800314e:	5cd3      	ldrb	r3, [r2, r3]
 8003150:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08004c94 	.word	0x08004c94

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800316a:	f7ff ffcd 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 800316e:	4601      	mov	r1, r0
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003178:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800317c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	fa92 f2a2 	rbit	r2, r2
 8003184:	603a      	str	r2, [r7, #0]
  return result;
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	40d3      	lsrs	r3, r2
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08004c94 	.word	0x08004c94

080031a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b092      	sub	sp, #72	; 0x48
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80d0 	beq.w	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031cc:	4b86      	ldr	r3, [pc, #536]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10e      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b83      	ldr	r3, [pc, #524]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4a82      	ldr	r2, [pc, #520]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	61d3      	str	r3, [r2, #28]
 80031e4:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b7d      	ldr	r3, [pc, #500]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d118      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003202:	4b7a      	ldr	r3, [pc, #488]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fd fe0d 	bl	8000e2c <HAL_GetTick>
 8003212:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fd fe09 	bl	8000e2c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	; 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0db      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b70      	ldr	r3, [pc, #448]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003234:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d07d      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800324e:	429a      	cmp	r2, r3
 8003250:	d076      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003252:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800325c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	4b5e      	ldr	r3, [pc, #376]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	461a      	mov	r2, r3
 800327c:	2301      	movs	r3, #1
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	461a      	mov	r2, r3
 80032a0:	2300      	movs	r3, #0
 80032a2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032a4:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d045      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fdba 	bl	8000e2c <HAL_GetTick>
 80032b8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fd fdb6 	bl	8000e2c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e086      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80032d2:	2302      	movs	r3, #2
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	2302      	movs	r3, #2
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	61fb      	str	r3, [r7, #28]
  return result;
 80032ea:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d102      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	e007      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003306:	2302      	movs	r3, #2
 8003308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2202      	movs	r2, #2
 8003318:	613a      	str	r2, [r7, #16]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	fa92 f2a2 	rbit	r2, r2
 8003320:	60fa      	str	r2, [r7, #12]
  return result;
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	fab2 f282 	clz	r2, r2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f002 021f 	and.w	r2, r2, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f202 	lsl.w	r2, r1, r2
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0bd      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4926      	ldr	r1, [pc, #152]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800334e:	4313      	orrs	r3, r2
 8003350:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003352:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003356:	2b01      	cmp	r3, #1
 8003358:	d105      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335a:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003364:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f023 0203 	bic.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	491a      	ldr	r1, [pc, #104]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003380:	4313      	orrs	r3, r2
 8003382:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f023 0210 	bic.w	r2, r3, #16
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4912      	ldr	r1, [pc, #72]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	490b      	ldr	r1, [pc, #44]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3748      	adds	r7, #72	; 0x48
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
 80033f0:	10908100 	.word	0x10908100

080033f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e040      	b.n	8003488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fb7e 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8c0 	bl	80035b8 <UART_SetConfig>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e022      	b.n	8003488 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa36 	bl	80038bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fabd 	bl	8003a00 <UART_CheckIdleState>
 8003486:	4603      	mov	r3, r0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	f040 8081 	bne.w	80035ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Transmit+0x26>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e079      	b.n	80035ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x38>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e072      	b.n	80035ae <HAL_UART_Transmit+0x11e>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2221      	movs	r2, #33	; 0x21
 80034da:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034dc:	f7fd fca6 	bl	8000e2c <HAL_GetTick>
 80034e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d108      	bne.n	800350e <HAL_UART_Transmit+0x7e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	e003      	b.n	8003516 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003516:	e02d      	b.n	8003574 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fab1 	bl	8003a8a <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e03d      	b.n	80035ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	881a      	ldrh	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	b292      	uxth	r2, r2
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	3302      	adds	r3, #2
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e008      	b.n	8003562 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b292      	uxth	r2, r2
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3301      	adds	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1cb      	bne.n	8003518 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa7d 	bl	8003a8a <UART_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e009      	b.n	80035ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e000      	b.n	80035ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4ba2      	ldr	r3, [pc, #648]	; (8003870 <UART_SetConfig+0x2b8>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	6939      	ldr	r1, [r7, #16]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a90      	ldr	r2, [pc, #576]	; (8003874 <UART_SetConfig+0x2bc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d121      	bne.n	800367c <UART_SetConfig+0xc4>
 8003638:	4b8f      	ldr	r3, [pc, #572]	; (8003878 <UART_SetConfig+0x2c0>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b03      	cmp	r3, #3
 8003642:	d817      	bhi.n	8003674 <UART_SetConfig+0xbc>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <UART_SetConfig+0x94>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003669 	.word	0x08003669
 8003654:	0800366f 	.word	0x0800366f
 8003658:	08003663 	.word	0x08003663
 800365c:	2300      	movs	r3, #0
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e01e      	b.n	80036a0 <UART_SetConfig+0xe8>
 8003662:	2302      	movs	r3, #2
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e01b      	b.n	80036a0 <UART_SetConfig+0xe8>
 8003668:	2304      	movs	r3, #4
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e018      	b.n	80036a0 <UART_SetConfig+0xe8>
 800366e:	2308      	movs	r3, #8
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e015      	b.n	80036a0 <UART_SetConfig+0xe8>
 8003674:	2310      	movs	r3, #16
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	bf00      	nop
 800367a:	e011      	b.n	80036a0 <UART_SetConfig+0xe8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7e      	ldr	r2, [pc, #504]	; (800387c <UART_SetConfig+0x2c4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d102      	bne.n	800368c <UART_SetConfig+0xd4>
 8003686:	2300      	movs	r3, #0
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e009      	b.n	80036a0 <UART_SetConfig+0xe8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a7b      	ldr	r2, [pc, #492]	; (8003880 <UART_SetConfig+0x2c8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d102      	bne.n	800369c <UART_SetConfig+0xe4>
 8003696:	2300      	movs	r3, #0
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e001      	b.n	80036a0 <UART_SetConfig+0xe8>
 800369c:	2310      	movs	r3, #16
 800369e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a8:	f040 8082 	bne.w	80037b0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d85e      	bhi.n	8003770 <UART_SetConfig+0x1b8>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0x100>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	080036fd 	.word	0x080036fd
 80036c0:	0800371d 	.word	0x0800371d
 80036c4:	08003771 	.word	0x08003771
 80036c8:	08003739 	.word	0x08003739
 80036cc:	08003771 	.word	0x08003771
 80036d0:	08003771 	.word	0x08003771
 80036d4:	08003771 	.word	0x08003771
 80036d8:	08003759 	.word	0x08003759
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036dc:	f7ff fd20 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 80036e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	005a      	lsls	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	61bb      	str	r3, [r7, #24]
        break;
 80036fa:	e03c      	b.n	8003776 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7ff fd32 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8003700:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	005a      	lsls	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	441a      	add	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	b29b      	uxth	r3, r3
 8003718:	61bb      	str	r3, [r7, #24]
        break;
 800371a:	e02c      	b.n	8003776 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003726:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6852      	ldr	r2, [r2, #4]
 800372e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	61bb      	str	r3, [r7, #24]
        break;
 8003736:	e01e      	b.n	8003776 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003738:	f7ff fc7c 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 800373c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	005a      	lsls	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	b29b      	uxth	r3, r3
 8003754:	61bb      	str	r3, [r7, #24]
        break;
 8003756:	e00e      	b.n	8003776 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	b29b      	uxth	r3, r3
 800376c:	61bb      	str	r3, [r7, #24]
        break;
 800376e:	e002      	b.n	8003776 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
        break;
 8003774:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d916      	bls.n	80037aa <UART_SetConfig+0x1f2>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003782:	d212      	bcs.n	80037aa <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	b29b      	uxth	r3, r3
 8003788:	f023 030f 	bic.w	r3, r3, #15
 800378c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	b29b      	uxth	r3, r3
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	b29a      	uxth	r2, r3
 800379a:	897b      	ldrh	r3, [r7, #10]
 800379c:	4313      	orrs	r3, r2
 800379e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	897a      	ldrh	r2, [r7, #10]
 80037a6:	60da      	str	r2, [r3, #12]
 80037a8:	e07d      	b.n	80038a6 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
 80037ae:	e07a      	b.n	80038a6 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80037b0:	7ffb      	ldrb	r3, [r7, #31]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d866      	bhi.n	8003884 <UART_SetConfig+0x2cc>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x204>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037ff 	.word	0x080037ff
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	08003885 	.word	0x08003885
 80037cc:	08003839 	.word	0x08003839
 80037d0:	08003885 	.word	0x08003885
 80037d4:	08003885 	.word	0x08003885
 80037d8:	08003885 	.word	0x08003885
 80037dc:	08003857 	.word	0x08003857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7ff fc9e 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085a      	lsrs	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	61bb      	str	r3, [r7, #24]
        break;
 80037fc:	e045      	b.n	800388a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037fe:	f7ff fcb1 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8003802:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	085a      	lsrs	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	b29b      	uxth	r3, r3
 8003818:	61bb      	str	r3, [r7, #24]
        break;
 800381a:	e036      	b.n	800388a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003826:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6852      	ldr	r2, [r2, #4]
 800382e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	61bb      	str	r3, [r7, #24]
        break;
 8003836:	e028      	b.n	800388a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003838:	f7ff fbfc 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 800383c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	085a      	lsrs	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	b29b      	uxth	r3, r3
 8003852:	61bb      	str	r3, [r7, #24]
        break;
 8003854:	e019      	b.n	800388a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	61bb      	str	r3, [r7, #24]
        break;
 800386c:	e00d      	b.n	800388a <UART_SetConfig+0x2d2>
 800386e:	bf00      	nop
 8003870:	efff69f3 	.word	0xefff69f3
 8003874:	40013800 	.word	0x40013800
 8003878:	40021000 	.word	0x40021000
 800387c:	40004400 	.word	0x40004400
 8003880:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	75fb      	strb	r3, [r7, #23]
        break;
 8003888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b0f      	cmp	r3, #15
 800388e:	d908      	bls.n	80038a2 <UART_SetConfig+0x2ea>
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d204      	bcs.n	80038a2 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e001      	b.n	80038a6 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01a      	beq.n	80039d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ba:	d10a      	bne.n	80039d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a0e:	f7fd fa0d 	bl	8000e2c <HAL_GetTick>
 8003a12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d10e      	bne.n	8003a40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f82a 	bl	8003a8a <UART_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e020      	b.n	8003a82 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d10e      	bne.n	8003a6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f814 	bl	8003a8a <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e00a      	b.n	8003a82 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9a:	e05d      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa2:	d059      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7fd f9c2 	bl	8000e2c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11b      	bne.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ac8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e042      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02b      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0e:	d123      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b18:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e00f      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d092      	beq.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <__errno>:
 8003b80:	4b01      	ldr	r3, [pc, #4]	; (8003b88 <__errno+0x8>)
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	2000000c 	.word	0x2000000c

08003b8c <__libc_init_array>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	4e0d      	ldr	r6, [pc, #52]	; (8003bc4 <__libc_init_array+0x38>)
 8003b90:	4c0d      	ldr	r4, [pc, #52]	; (8003bc8 <__libc_init_array+0x3c>)
 8003b92:	1ba4      	subs	r4, r4, r6
 8003b94:	10a4      	asrs	r4, r4, #2
 8003b96:	2500      	movs	r5, #0
 8003b98:	42a5      	cmp	r5, r4
 8003b9a:	d109      	bne.n	8003bb0 <__libc_init_array+0x24>
 8003b9c:	4e0b      	ldr	r6, [pc, #44]	; (8003bcc <__libc_init_array+0x40>)
 8003b9e:	4c0c      	ldr	r4, [pc, #48]	; (8003bd0 <__libc_init_array+0x44>)
 8003ba0:	f001 f826 	bl	8004bf0 <_init>
 8003ba4:	1ba4      	subs	r4, r4, r6
 8003ba6:	10a4      	asrs	r4, r4, #2
 8003ba8:	2500      	movs	r5, #0
 8003baa:	42a5      	cmp	r5, r4
 8003bac:	d105      	bne.n	8003bba <__libc_init_array+0x2e>
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bb4:	4798      	blx	r3
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	e7ee      	b.n	8003b98 <__libc_init_array+0xc>
 8003bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bbe:	4798      	blx	r3
 8003bc0:	3501      	adds	r5, #1
 8003bc2:	e7f2      	b.n	8003baa <__libc_init_array+0x1e>
 8003bc4:	08004d54 	.word	0x08004d54
 8003bc8:	08004d54 	.word	0x08004d54
 8003bcc:	08004d54 	.word	0x08004d54
 8003bd0:	08004d58 	.word	0x08004d58

08003bd4 <memset>:
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <memset+0xa>
 8003bdc:	4770      	bx	lr
 8003bde:	f803 1b01 	strb.w	r1, [r3], #1
 8003be2:	e7f9      	b.n	8003bd8 <memset+0x4>

08003be4 <iprintf>:
 8003be4:	b40f      	push	{r0, r1, r2, r3}
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <iprintf+0x2c>)
 8003be8:	b513      	push	{r0, r1, r4, lr}
 8003bea:	681c      	ldr	r4, [r3, #0]
 8003bec:	b124      	cbz	r4, 8003bf8 <iprintf+0x14>
 8003bee:	69a3      	ldr	r3, [r4, #24]
 8003bf0:	b913      	cbnz	r3, 8003bf8 <iprintf+0x14>
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 fad8 	bl	80041a8 <__sinit>
 8003bf8:	ab05      	add	r3, sp, #20
 8003bfa:	9a04      	ldr	r2, [sp, #16]
 8003bfc:	68a1      	ldr	r1, [r4, #8]
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 fc99 	bl	8004538 <_vfiprintf_r>
 8003c06:	b002      	add	sp, #8
 8003c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c0c:	b004      	add	sp, #16
 8003c0e:	4770      	bx	lr
 8003c10:	2000000c 	.word	0x2000000c

08003c14 <_puts_r>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	460e      	mov	r6, r1
 8003c18:	4605      	mov	r5, r0
 8003c1a:	b118      	cbz	r0, 8003c24 <_puts_r+0x10>
 8003c1c:	6983      	ldr	r3, [r0, #24]
 8003c1e:	b90b      	cbnz	r3, 8003c24 <_puts_r+0x10>
 8003c20:	f000 fac2 	bl	80041a8 <__sinit>
 8003c24:	69ab      	ldr	r3, [r5, #24]
 8003c26:	68ac      	ldr	r4, [r5, #8]
 8003c28:	b913      	cbnz	r3, 8003c30 <_puts_r+0x1c>
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f000 fabc 	bl	80041a8 <__sinit>
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <_puts_r+0xac>)
 8003c32:	429c      	cmp	r4, r3
 8003c34:	d117      	bne.n	8003c66 <_puts_r+0x52>
 8003c36:	686c      	ldr	r4, [r5, #4]
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	071b      	lsls	r3, r3, #28
 8003c3c:	d51d      	bpl.n	8003c7a <_puts_r+0x66>
 8003c3e:	6923      	ldr	r3, [r4, #16]
 8003c40:	b1db      	cbz	r3, 8003c7a <_puts_r+0x66>
 8003c42:	3e01      	subs	r6, #1
 8003c44:	68a3      	ldr	r3, [r4, #8]
 8003c46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	60a3      	str	r3, [r4, #8]
 8003c4e:	b9e9      	cbnz	r1, 8003c8c <_puts_r+0x78>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	da2e      	bge.n	8003cb2 <_puts_r+0x9e>
 8003c54:	4622      	mov	r2, r4
 8003c56:	210a      	movs	r1, #10
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f000 f8f5 	bl	8003e48 <__swbuf_r>
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d011      	beq.n	8003c86 <_puts_r+0x72>
 8003c62:	200a      	movs	r0, #10
 8003c64:	e011      	b.n	8003c8a <_puts_r+0x76>
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <_puts_r+0xb0>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d101      	bne.n	8003c70 <_puts_r+0x5c>
 8003c6c:	68ac      	ldr	r4, [r5, #8]
 8003c6e:	e7e3      	b.n	8003c38 <_puts_r+0x24>
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <_puts_r+0xb4>)
 8003c72:	429c      	cmp	r4, r3
 8003c74:	bf08      	it	eq
 8003c76:	68ec      	ldreq	r4, [r5, #12]
 8003c78:	e7de      	b.n	8003c38 <_puts_r+0x24>
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f000 f935 	bl	8003eec <__swsetup_r>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d0dd      	beq.n	8003c42 <_puts_r+0x2e>
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da04      	bge.n	8003c9a <_puts_r+0x86>
 8003c90:	69a2      	ldr	r2, [r4, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	dc06      	bgt.n	8003ca4 <_puts_r+0x90>
 8003c96:	290a      	cmp	r1, #10
 8003c98:	d004      	beq.n	8003ca4 <_puts_r+0x90>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	6022      	str	r2, [r4, #0]
 8003ca0:	7019      	strb	r1, [r3, #0]
 8003ca2:	e7cf      	b.n	8003c44 <_puts_r+0x30>
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f000 f8ce 	bl	8003e48 <__swbuf_r>
 8003cac:	3001      	adds	r0, #1
 8003cae:	d1c9      	bne.n	8003c44 <_puts_r+0x30>
 8003cb0:	e7e9      	b.n	8003c86 <_puts_r+0x72>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	200a      	movs	r0, #10
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	6022      	str	r2, [r4, #0]
 8003cba:	7018      	strb	r0, [r3, #0]
 8003cbc:	e7e5      	b.n	8003c8a <_puts_r+0x76>
 8003cbe:	bf00      	nop
 8003cc0:	08004ce0 	.word	0x08004ce0
 8003cc4:	08004d00 	.word	0x08004d00
 8003cc8:	08004cc0 	.word	0x08004cc0

08003ccc <puts>:
 8003ccc:	4b02      	ldr	r3, [pc, #8]	; (8003cd8 <puts+0xc>)
 8003cce:	4601      	mov	r1, r0
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	f7ff bf9f 	b.w	8003c14 <_puts_r>
 8003cd6:	bf00      	nop
 8003cd8:	2000000c 	.word	0x2000000c

08003cdc <setbuf>:
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2202      	moveq	r2, #2
 8003ce6:	2200      	movne	r2, #0
 8003ce8:	f000 b800 	b.w	8003cec <setvbuf>

08003cec <setvbuf>:
 8003cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	4b51      	ldr	r3, [pc, #324]	; (8003e38 <setvbuf+0x14c>)
 8003cf4:	681e      	ldr	r6, [r3, #0]
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	460f      	mov	r7, r1
 8003cfa:	4690      	mov	r8, r2
 8003cfc:	b126      	cbz	r6, 8003d08 <setvbuf+0x1c>
 8003cfe:	69b3      	ldr	r3, [r6, #24]
 8003d00:	b913      	cbnz	r3, 8003d08 <setvbuf+0x1c>
 8003d02:	4630      	mov	r0, r6
 8003d04:	f000 fa50 	bl	80041a8 <__sinit>
 8003d08:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <setvbuf+0x150>)
 8003d0a:	429c      	cmp	r4, r3
 8003d0c:	d152      	bne.n	8003db4 <setvbuf+0xc8>
 8003d0e:	6874      	ldr	r4, [r6, #4]
 8003d10:	f1b8 0f02 	cmp.w	r8, #2
 8003d14:	d006      	beq.n	8003d24 <setvbuf+0x38>
 8003d16:	f1b8 0f01 	cmp.w	r8, #1
 8003d1a:	f200 8089 	bhi.w	8003e30 <setvbuf+0x144>
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	f2c0 8086 	blt.w	8003e30 <setvbuf+0x144>
 8003d24:	4621      	mov	r1, r4
 8003d26:	4630      	mov	r0, r6
 8003d28:	f000 f9d4 	bl	80040d4 <_fflush_r>
 8003d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d2e:	b141      	cbz	r1, 8003d42 <setvbuf+0x56>
 8003d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d34:	4299      	cmp	r1, r3
 8003d36:	d002      	beq.n	8003d3e <setvbuf+0x52>
 8003d38:	4630      	mov	r0, r6
 8003d3a:	f000 fb2b 	bl	8004394 <_free_r>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	6363      	str	r3, [r4, #52]	; 0x34
 8003d42:	2300      	movs	r3, #0
 8003d44:	61a3      	str	r3, [r4, #24]
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	d503      	bpl.n	8003d56 <setvbuf+0x6a>
 8003d4e:	6921      	ldr	r1, [r4, #16]
 8003d50:	4630      	mov	r0, r6
 8003d52:	f000 fb1f 	bl	8004394 <_free_r>
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d5c:	f023 0303 	bic.w	r3, r3, #3
 8003d60:	f1b8 0f02 	cmp.w	r8, #2
 8003d64:	81a3      	strh	r3, [r4, #12]
 8003d66:	d05d      	beq.n	8003e24 <setvbuf+0x138>
 8003d68:	ab01      	add	r3, sp, #4
 8003d6a:	466a      	mov	r2, sp
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f000 faa4 	bl	80042bc <__swhatbuf_r>
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	4318      	orrs	r0, r3
 8003d78:	81a0      	strh	r0, [r4, #12]
 8003d7a:	bb2d      	cbnz	r5, 8003dc8 <setvbuf+0xdc>
 8003d7c:	9d00      	ldr	r5, [sp, #0]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 fb00 	bl	8004384 <malloc>
 8003d84:	4607      	mov	r7, r0
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d14e      	bne.n	8003e28 <setvbuf+0x13c>
 8003d8a:	f8dd 9000 	ldr.w	r9, [sp]
 8003d8e:	45a9      	cmp	r9, r5
 8003d90:	d13c      	bne.n	8003e0c <setvbuf+0x120>
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	f043 0302 	orr.w	r3, r3, #2
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60a3      	str	r3, [r4, #8]
 8003da2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	2301      	movs	r3, #1
 8003dac:	6163      	str	r3, [r4, #20]
 8003dae:	b003      	add	sp, #12
 8003db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003db4:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <setvbuf+0x154>)
 8003db6:	429c      	cmp	r4, r3
 8003db8:	d101      	bne.n	8003dbe <setvbuf+0xd2>
 8003dba:	68b4      	ldr	r4, [r6, #8]
 8003dbc:	e7a8      	b.n	8003d10 <setvbuf+0x24>
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <setvbuf+0x158>)
 8003dc0:	429c      	cmp	r4, r3
 8003dc2:	bf08      	it	eq
 8003dc4:	68f4      	ldreq	r4, [r6, #12]
 8003dc6:	e7a3      	b.n	8003d10 <setvbuf+0x24>
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	d0d8      	beq.n	8003d7e <setvbuf+0x92>
 8003dcc:	69b3      	ldr	r3, [r6, #24]
 8003dce:	b913      	cbnz	r3, 8003dd6 <setvbuf+0xea>
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 f9e9 	bl	80041a8 <__sinit>
 8003dd6:	f1b8 0f01 	cmp.w	r8, #1
 8003dda:	bf08      	it	eq
 8003ddc:	89a3      	ldrheq	r3, [r4, #12]
 8003dde:	6027      	str	r7, [r4, #0]
 8003de0:	bf04      	itt	eq
 8003de2:	f043 0301 	orreq.w	r3, r3, #1
 8003de6:	81a3      	strheq	r3, [r4, #12]
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f013 0008 	ands.w	r0, r3, #8
 8003dee:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003df2:	d01b      	beq.n	8003e2c <setvbuf+0x140>
 8003df4:	f013 0001 	ands.w	r0, r3, #1
 8003df8:	bf18      	it	ne
 8003dfa:	426d      	negne	r5, r5
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	bf1d      	ittte	ne
 8003e02:	60a3      	strne	r3, [r4, #8]
 8003e04:	61a5      	strne	r5, [r4, #24]
 8003e06:	4618      	movne	r0, r3
 8003e08:	60a5      	streq	r5, [r4, #8]
 8003e0a:	e7d0      	b.n	8003dae <setvbuf+0xc2>
 8003e0c:	4648      	mov	r0, r9
 8003e0e:	f000 fab9 	bl	8004384 <malloc>
 8003e12:	4607      	mov	r7, r0
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d0bc      	beq.n	8003d92 <setvbuf+0xa6>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	81a3      	strh	r3, [r4, #12]
 8003e20:	464d      	mov	r5, r9
 8003e22:	e7d3      	b.n	8003dcc <setvbuf+0xe0>
 8003e24:	2000      	movs	r0, #0
 8003e26:	e7b6      	b.n	8003d96 <setvbuf+0xaa>
 8003e28:	46a9      	mov	r9, r5
 8003e2a:	e7f5      	b.n	8003e18 <setvbuf+0x12c>
 8003e2c:	60a0      	str	r0, [r4, #8]
 8003e2e:	e7be      	b.n	8003dae <setvbuf+0xc2>
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e34:	e7bb      	b.n	8003dae <setvbuf+0xc2>
 8003e36:	bf00      	nop
 8003e38:	2000000c 	.word	0x2000000c
 8003e3c:	08004ce0 	.word	0x08004ce0
 8003e40:	08004d00 	.word	0x08004d00
 8003e44:	08004cc0 	.word	0x08004cc0

08003e48 <__swbuf_r>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	460e      	mov	r6, r1
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	4605      	mov	r5, r0
 8003e50:	b118      	cbz	r0, 8003e5a <__swbuf_r+0x12>
 8003e52:	6983      	ldr	r3, [r0, #24]
 8003e54:	b90b      	cbnz	r3, 8003e5a <__swbuf_r+0x12>
 8003e56:	f000 f9a7 	bl	80041a8 <__sinit>
 8003e5a:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <__swbuf_r+0x98>)
 8003e5c:	429c      	cmp	r4, r3
 8003e5e:	d12a      	bne.n	8003eb6 <__swbuf_r+0x6e>
 8003e60:	686c      	ldr	r4, [r5, #4]
 8003e62:	69a3      	ldr	r3, [r4, #24]
 8003e64:	60a3      	str	r3, [r4, #8]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	071a      	lsls	r2, r3, #28
 8003e6a:	d52e      	bpl.n	8003eca <__swbuf_r+0x82>
 8003e6c:	6923      	ldr	r3, [r4, #16]
 8003e6e:	b363      	cbz	r3, 8003eca <__swbuf_r+0x82>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	1ac0      	subs	r0, r0, r3
 8003e76:	6963      	ldr	r3, [r4, #20]
 8003e78:	b2f6      	uxtb	r6, r6
 8003e7a:	4283      	cmp	r3, r0
 8003e7c:	4637      	mov	r7, r6
 8003e7e:	dc04      	bgt.n	8003e8a <__swbuf_r+0x42>
 8003e80:	4621      	mov	r1, r4
 8003e82:	4628      	mov	r0, r5
 8003e84:	f000 f926 	bl	80040d4 <_fflush_r>
 8003e88:	bb28      	cbnz	r0, 8003ed6 <__swbuf_r+0x8e>
 8003e8a:	68a3      	ldr	r3, [r4, #8]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	60a3      	str	r3, [r4, #8]
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	6022      	str	r2, [r4, #0]
 8003e96:	701e      	strb	r6, [r3, #0]
 8003e98:	6963      	ldr	r3, [r4, #20]
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	4283      	cmp	r3, r0
 8003e9e:	d004      	beq.n	8003eaa <__swbuf_r+0x62>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	07db      	lsls	r3, r3, #31
 8003ea4:	d519      	bpl.n	8003eda <__swbuf_r+0x92>
 8003ea6:	2e0a      	cmp	r6, #10
 8003ea8:	d117      	bne.n	8003eda <__swbuf_r+0x92>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f911 	bl	80040d4 <_fflush_r>
 8003eb2:	b190      	cbz	r0, 8003eda <__swbuf_r+0x92>
 8003eb4:	e00f      	b.n	8003ed6 <__swbuf_r+0x8e>
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <__swbuf_r+0x9c>)
 8003eb8:	429c      	cmp	r4, r3
 8003eba:	d101      	bne.n	8003ec0 <__swbuf_r+0x78>
 8003ebc:	68ac      	ldr	r4, [r5, #8]
 8003ebe:	e7d0      	b.n	8003e62 <__swbuf_r+0x1a>
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <__swbuf_r+0xa0>)
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	bf08      	it	eq
 8003ec6:	68ec      	ldreq	r4, [r5, #12]
 8003ec8:	e7cb      	b.n	8003e62 <__swbuf_r+0x1a>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f80d 	bl	8003eec <__swsetup_r>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d0cc      	beq.n	8003e70 <__swbuf_r+0x28>
 8003ed6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003eda:	4638      	mov	r0, r7
 8003edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	08004ce0 	.word	0x08004ce0
 8003ee4:	08004d00 	.word	0x08004d00
 8003ee8:	08004cc0 	.word	0x08004cc0

08003eec <__swsetup_r>:
 8003eec:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <__swsetup_r+0xcc>)
 8003eee:	b570      	push	{r4, r5, r6, lr}
 8003ef0:	681d      	ldr	r5, [r3, #0]
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	b125      	cbz	r5, 8003f02 <__swsetup_r+0x16>
 8003ef8:	69ab      	ldr	r3, [r5, #24]
 8003efa:	b913      	cbnz	r3, 8003f02 <__swsetup_r+0x16>
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 f953 	bl	80041a8 <__sinit>
 8003f02:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <__swsetup_r+0xd0>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d10f      	bne.n	8003f28 <__swsetup_r+0x3c>
 8003f08:	686c      	ldr	r4, [r5, #4]
 8003f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	0715      	lsls	r5, r2, #28
 8003f12:	d42c      	bmi.n	8003f6e <__swsetup_r+0x82>
 8003f14:	06d0      	lsls	r0, r2, #27
 8003f16:	d411      	bmi.n	8003f3c <__swsetup_r+0x50>
 8003f18:	2209      	movs	r2, #9
 8003f1a:	6032      	str	r2, [r6, #0]
 8003f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f20:	81a3      	strh	r3, [r4, #12]
 8003f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f26:	e03e      	b.n	8003fa6 <__swsetup_r+0xba>
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <__swsetup_r+0xd4>)
 8003f2a:	429c      	cmp	r4, r3
 8003f2c:	d101      	bne.n	8003f32 <__swsetup_r+0x46>
 8003f2e:	68ac      	ldr	r4, [r5, #8]
 8003f30:	e7eb      	b.n	8003f0a <__swsetup_r+0x1e>
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <__swsetup_r+0xd8>)
 8003f34:	429c      	cmp	r4, r3
 8003f36:	bf08      	it	eq
 8003f38:	68ec      	ldreq	r4, [r5, #12]
 8003f3a:	e7e6      	b.n	8003f0a <__swsetup_r+0x1e>
 8003f3c:	0751      	lsls	r1, r2, #29
 8003f3e:	d512      	bpl.n	8003f66 <__swsetup_r+0x7a>
 8003f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f42:	b141      	cbz	r1, 8003f56 <__swsetup_r+0x6a>
 8003f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f48:	4299      	cmp	r1, r3
 8003f4a:	d002      	beq.n	8003f52 <__swsetup_r+0x66>
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f000 fa21 	bl	8004394 <_free_r>
 8003f52:	2300      	movs	r3, #0
 8003f54:	6363      	str	r3, [r4, #52]	; 0x34
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f5c:	81a3      	strh	r3, [r4, #12]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6063      	str	r3, [r4, #4]
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	b94b      	cbnz	r3, 8003f86 <__swsetup_r+0x9a>
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7c:	d003      	beq.n	8003f86 <__swsetup_r+0x9a>
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 f9bf 	bl	8004304 <__smakebuf_r>
 8003f86:	89a2      	ldrh	r2, [r4, #12]
 8003f88:	f012 0301 	ands.w	r3, r2, #1
 8003f8c:	d00c      	beq.n	8003fa8 <__swsetup_r+0xbc>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	6963      	ldr	r3, [r4, #20]
 8003f94:	425b      	negs	r3, r3
 8003f96:	61a3      	str	r3, [r4, #24]
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	b953      	cbnz	r3, 8003fb2 <__swsetup_r+0xc6>
 8003f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003fa4:	d1ba      	bne.n	8003f1c <__swsetup_r+0x30>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	0792      	lsls	r2, r2, #30
 8003faa:	bf58      	it	pl
 8003fac:	6963      	ldrpl	r3, [r4, #20]
 8003fae:	60a3      	str	r3, [r4, #8]
 8003fb0:	e7f2      	b.n	8003f98 <__swsetup_r+0xac>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	e7f7      	b.n	8003fa6 <__swsetup_r+0xba>
 8003fb6:	bf00      	nop
 8003fb8:	2000000c 	.word	0x2000000c
 8003fbc:	08004ce0 	.word	0x08004ce0
 8003fc0:	08004d00 	.word	0x08004d00
 8003fc4:	08004cc0 	.word	0x08004cc0

08003fc8 <__sflush_r>:
 8003fc8:	898a      	ldrh	r2, [r1, #12]
 8003fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fce:	4605      	mov	r5, r0
 8003fd0:	0710      	lsls	r0, r2, #28
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	d458      	bmi.n	8004088 <__sflush_r+0xc0>
 8003fd6:	684b      	ldr	r3, [r1, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	dc05      	bgt.n	8003fe8 <__sflush_r+0x20>
 8003fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	dc02      	bgt.n	8003fe8 <__sflush_r+0x20>
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fea:	2e00      	cmp	r6, #0
 8003fec:	d0f9      	beq.n	8003fe2 <__sflush_r+0x1a>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ff4:	682f      	ldr	r7, [r5, #0]
 8003ff6:	6a21      	ldr	r1, [r4, #32]
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	d032      	beq.n	8004062 <__sflush_r+0x9a>
 8003ffc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	075a      	lsls	r2, r3, #29
 8004002:	d505      	bpl.n	8004010 <__sflush_r+0x48>
 8004004:	6863      	ldr	r3, [r4, #4]
 8004006:	1ac0      	subs	r0, r0, r3
 8004008:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800400a:	b10b      	cbz	r3, 8004010 <__sflush_r+0x48>
 800400c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800400e:	1ac0      	subs	r0, r0, r3
 8004010:	2300      	movs	r3, #0
 8004012:	4602      	mov	r2, r0
 8004014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004016:	6a21      	ldr	r1, [r4, #32]
 8004018:	4628      	mov	r0, r5
 800401a:	47b0      	blx	r6
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	d106      	bne.n	8004030 <__sflush_r+0x68>
 8004022:	6829      	ldr	r1, [r5, #0]
 8004024:	291d      	cmp	r1, #29
 8004026:	d848      	bhi.n	80040ba <__sflush_r+0xf2>
 8004028:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <__sflush_r+0x108>)
 800402a:	40ca      	lsrs	r2, r1
 800402c:	07d6      	lsls	r6, r2, #31
 800402e:	d544      	bpl.n	80040ba <__sflush_r+0xf2>
 8004030:	2200      	movs	r2, #0
 8004032:	6062      	str	r2, [r4, #4]
 8004034:	04d9      	lsls	r1, r3, #19
 8004036:	6922      	ldr	r2, [r4, #16]
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	d504      	bpl.n	8004046 <__sflush_r+0x7e>
 800403c:	1c42      	adds	r2, r0, #1
 800403e:	d101      	bne.n	8004044 <__sflush_r+0x7c>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b903      	cbnz	r3, 8004046 <__sflush_r+0x7e>
 8004044:	6560      	str	r0, [r4, #84]	; 0x54
 8004046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004048:	602f      	str	r7, [r5, #0]
 800404a:	2900      	cmp	r1, #0
 800404c:	d0c9      	beq.n	8003fe2 <__sflush_r+0x1a>
 800404e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004052:	4299      	cmp	r1, r3
 8004054:	d002      	beq.n	800405c <__sflush_r+0x94>
 8004056:	4628      	mov	r0, r5
 8004058:	f000 f99c 	bl	8004394 <_free_r>
 800405c:	2000      	movs	r0, #0
 800405e:	6360      	str	r0, [r4, #52]	; 0x34
 8004060:	e7c0      	b.n	8003fe4 <__sflush_r+0x1c>
 8004062:	2301      	movs	r3, #1
 8004064:	4628      	mov	r0, r5
 8004066:	47b0      	blx	r6
 8004068:	1c41      	adds	r1, r0, #1
 800406a:	d1c8      	bne.n	8003ffe <__sflush_r+0x36>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0c5      	beq.n	8003ffe <__sflush_r+0x36>
 8004072:	2b1d      	cmp	r3, #29
 8004074:	d001      	beq.n	800407a <__sflush_r+0xb2>
 8004076:	2b16      	cmp	r3, #22
 8004078:	d101      	bne.n	800407e <__sflush_r+0xb6>
 800407a:	602f      	str	r7, [r5, #0]
 800407c:	e7b1      	b.n	8003fe2 <__sflush_r+0x1a>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004084:	81a3      	strh	r3, [r4, #12]
 8004086:	e7ad      	b.n	8003fe4 <__sflush_r+0x1c>
 8004088:	690f      	ldr	r7, [r1, #16]
 800408a:	2f00      	cmp	r7, #0
 800408c:	d0a9      	beq.n	8003fe2 <__sflush_r+0x1a>
 800408e:	0793      	lsls	r3, r2, #30
 8004090:	680e      	ldr	r6, [r1, #0]
 8004092:	bf08      	it	eq
 8004094:	694b      	ldreq	r3, [r1, #20]
 8004096:	600f      	str	r7, [r1, #0]
 8004098:	bf18      	it	ne
 800409a:	2300      	movne	r3, #0
 800409c:	eba6 0807 	sub.w	r8, r6, r7
 80040a0:	608b      	str	r3, [r1, #8]
 80040a2:	f1b8 0f00 	cmp.w	r8, #0
 80040a6:	dd9c      	ble.n	8003fe2 <__sflush_r+0x1a>
 80040a8:	4643      	mov	r3, r8
 80040aa:	463a      	mov	r2, r7
 80040ac:	6a21      	ldr	r1, [r4, #32]
 80040ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b0      	blx	r6
 80040b4:	2800      	cmp	r0, #0
 80040b6:	dc06      	bgt.n	80040c6 <__sflush_r+0xfe>
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c4:	e78e      	b.n	8003fe4 <__sflush_r+0x1c>
 80040c6:	4407      	add	r7, r0
 80040c8:	eba8 0800 	sub.w	r8, r8, r0
 80040cc:	e7e9      	b.n	80040a2 <__sflush_r+0xda>
 80040ce:	bf00      	nop
 80040d0:	20400001 	.word	0x20400001

080040d4 <_fflush_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	690b      	ldr	r3, [r1, #16]
 80040d8:	4605      	mov	r5, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	b1db      	cbz	r3, 8004116 <_fflush_r+0x42>
 80040de:	b118      	cbz	r0, 80040e8 <_fflush_r+0x14>
 80040e0:	6983      	ldr	r3, [r0, #24]
 80040e2:	b90b      	cbnz	r3, 80040e8 <_fflush_r+0x14>
 80040e4:	f000 f860 	bl	80041a8 <__sinit>
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <_fflush_r+0x48>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d109      	bne.n	8004102 <_fflush_r+0x2e>
 80040ee:	686c      	ldr	r4, [r5, #4]
 80040f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f4:	b17b      	cbz	r3, 8004116 <_fflush_r+0x42>
 80040f6:	4621      	mov	r1, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040fe:	f7ff bf63 	b.w	8003fc8 <__sflush_r>
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <_fflush_r+0x4c>)
 8004104:	429c      	cmp	r4, r3
 8004106:	d101      	bne.n	800410c <_fflush_r+0x38>
 8004108:	68ac      	ldr	r4, [r5, #8]
 800410a:	e7f1      	b.n	80040f0 <_fflush_r+0x1c>
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <_fflush_r+0x50>)
 800410e:	429c      	cmp	r4, r3
 8004110:	bf08      	it	eq
 8004112:	68ec      	ldreq	r4, [r5, #12]
 8004114:	e7ec      	b.n	80040f0 <_fflush_r+0x1c>
 8004116:	2000      	movs	r0, #0
 8004118:	bd38      	pop	{r3, r4, r5, pc}
 800411a:	bf00      	nop
 800411c:	08004ce0 	.word	0x08004ce0
 8004120:	08004d00 	.word	0x08004d00
 8004124:	08004cc0 	.word	0x08004cc0

08004128 <std>:
 8004128:	2300      	movs	r3, #0
 800412a:	b510      	push	{r4, lr}
 800412c:	4604      	mov	r4, r0
 800412e:	e9c0 3300 	strd	r3, r3, [r0]
 8004132:	6083      	str	r3, [r0, #8]
 8004134:	8181      	strh	r1, [r0, #12]
 8004136:	6643      	str	r3, [r0, #100]	; 0x64
 8004138:	81c2      	strh	r2, [r0, #14]
 800413a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800413e:	6183      	str	r3, [r0, #24]
 8004140:	4619      	mov	r1, r3
 8004142:	2208      	movs	r2, #8
 8004144:	305c      	adds	r0, #92	; 0x5c
 8004146:	f7ff fd45 	bl	8003bd4 <memset>
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <std+0x38>)
 800414c:	6263      	str	r3, [r4, #36]	; 0x24
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <std+0x3c>)
 8004150:	62a3      	str	r3, [r4, #40]	; 0x28
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <std+0x40>)
 8004154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <std+0x44>)
 8004158:	6224      	str	r4, [r4, #32]
 800415a:	6323      	str	r3, [r4, #48]	; 0x30
 800415c:	bd10      	pop	{r4, pc}
 800415e:	bf00      	nop
 8004160:	08004a95 	.word	0x08004a95
 8004164:	08004ab7 	.word	0x08004ab7
 8004168:	08004aef 	.word	0x08004aef
 800416c:	08004b13 	.word	0x08004b13

08004170 <_cleanup_r>:
 8004170:	4901      	ldr	r1, [pc, #4]	; (8004178 <_cleanup_r+0x8>)
 8004172:	f000 b885 	b.w	8004280 <_fwalk_reent>
 8004176:	bf00      	nop
 8004178:	080040d5 	.word	0x080040d5

0800417c <__sfmoreglue>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	1e4a      	subs	r2, r1, #1
 8004180:	2568      	movs	r5, #104	; 0x68
 8004182:	4355      	muls	r5, r2
 8004184:	460e      	mov	r6, r1
 8004186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800418a:	f000 f951 	bl	8004430 <_malloc_r>
 800418e:	4604      	mov	r4, r0
 8004190:	b140      	cbz	r0, 80041a4 <__sfmoreglue+0x28>
 8004192:	2100      	movs	r1, #0
 8004194:	e9c0 1600 	strd	r1, r6, [r0]
 8004198:	300c      	adds	r0, #12
 800419a:	60a0      	str	r0, [r4, #8]
 800419c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041a0:	f7ff fd18 	bl	8003bd4 <memset>
 80041a4:	4620      	mov	r0, r4
 80041a6:	bd70      	pop	{r4, r5, r6, pc}

080041a8 <__sinit>:
 80041a8:	6983      	ldr	r3, [r0, #24]
 80041aa:	b510      	push	{r4, lr}
 80041ac:	4604      	mov	r4, r0
 80041ae:	bb33      	cbnz	r3, 80041fe <__sinit+0x56>
 80041b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80041b4:	6503      	str	r3, [r0, #80]	; 0x50
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <__sinit+0x58>)
 80041b8:	4a12      	ldr	r2, [pc, #72]	; (8004204 <__sinit+0x5c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6282      	str	r2, [r0, #40]	; 0x28
 80041be:	4298      	cmp	r0, r3
 80041c0:	bf04      	itt	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	6183      	streq	r3, [r0, #24]
 80041c6:	f000 f81f 	bl	8004208 <__sfp>
 80041ca:	6060      	str	r0, [r4, #4]
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 f81b 	bl	8004208 <__sfp>
 80041d2:	60a0      	str	r0, [r4, #8]
 80041d4:	4620      	mov	r0, r4
 80041d6:	f000 f817 	bl	8004208 <__sfp>
 80041da:	2200      	movs	r2, #0
 80041dc:	60e0      	str	r0, [r4, #12]
 80041de:	2104      	movs	r1, #4
 80041e0:	6860      	ldr	r0, [r4, #4]
 80041e2:	f7ff ffa1 	bl	8004128 <std>
 80041e6:	2201      	movs	r2, #1
 80041e8:	2109      	movs	r1, #9
 80041ea:	68a0      	ldr	r0, [r4, #8]
 80041ec:	f7ff ff9c 	bl	8004128 <std>
 80041f0:	2202      	movs	r2, #2
 80041f2:	2112      	movs	r1, #18
 80041f4:	68e0      	ldr	r0, [r4, #12]
 80041f6:	f7ff ff97 	bl	8004128 <std>
 80041fa:	2301      	movs	r3, #1
 80041fc:	61a3      	str	r3, [r4, #24]
 80041fe:	bd10      	pop	{r4, pc}
 8004200:	08004cbc 	.word	0x08004cbc
 8004204:	08004171 	.word	0x08004171

08004208 <__sfp>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <__sfp+0x70>)
 800420c:	681e      	ldr	r6, [r3, #0]
 800420e:	69b3      	ldr	r3, [r6, #24]
 8004210:	4607      	mov	r7, r0
 8004212:	b913      	cbnz	r3, 800421a <__sfp+0x12>
 8004214:	4630      	mov	r0, r6
 8004216:	f7ff ffc7 	bl	80041a8 <__sinit>
 800421a:	3648      	adds	r6, #72	; 0x48
 800421c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004220:	3b01      	subs	r3, #1
 8004222:	d503      	bpl.n	800422c <__sfp+0x24>
 8004224:	6833      	ldr	r3, [r6, #0]
 8004226:	b133      	cbz	r3, 8004236 <__sfp+0x2e>
 8004228:	6836      	ldr	r6, [r6, #0]
 800422a:	e7f7      	b.n	800421c <__sfp+0x14>
 800422c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004230:	b16d      	cbz	r5, 800424e <__sfp+0x46>
 8004232:	3468      	adds	r4, #104	; 0x68
 8004234:	e7f4      	b.n	8004220 <__sfp+0x18>
 8004236:	2104      	movs	r1, #4
 8004238:	4638      	mov	r0, r7
 800423a:	f7ff ff9f 	bl	800417c <__sfmoreglue>
 800423e:	6030      	str	r0, [r6, #0]
 8004240:	2800      	cmp	r0, #0
 8004242:	d1f1      	bne.n	8004228 <__sfp+0x20>
 8004244:	230c      	movs	r3, #12
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4604      	mov	r4, r0
 800424a:	4620      	mov	r0, r4
 800424c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <__sfp+0x74>)
 8004250:	6665      	str	r5, [r4, #100]	; 0x64
 8004252:	e9c4 5500 	strd	r5, r5, [r4]
 8004256:	60a5      	str	r5, [r4, #8]
 8004258:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800425c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004260:	2208      	movs	r2, #8
 8004262:	4629      	mov	r1, r5
 8004264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004268:	f7ff fcb4 	bl	8003bd4 <memset>
 800426c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004274:	e7e9      	b.n	800424a <__sfp+0x42>
 8004276:	bf00      	nop
 8004278:	08004cbc 	.word	0x08004cbc
 800427c:	ffff0001 	.word	0xffff0001

08004280 <_fwalk_reent>:
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	4680      	mov	r8, r0
 8004286:	4689      	mov	r9, r1
 8004288:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800428c:	2600      	movs	r6, #0
 800428e:	b914      	cbnz	r4, 8004296 <_fwalk_reent+0x16>
 8004290:	4630      	mov	r0, r6
 8004292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004296:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800429a:	3f01      	subs	r7, #1
 800429c:	d501      	bpl.n	80042a2 <_fwalk_reent+0x22>
 800429e:	6824      	ldr	r4, [r4, #0]
 80042a0:	e7f5      	b.n	800428e <_fwalk_reent+0xe>
 80042a2:	89ab      	ldrh	r3, [r5, #12]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d907      	bls.n	80042b8 <_fwalk_reent+0x38>
 80042a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042ac:	3301      	adds	r3, #1
 80042ae:	d003      	beq.n	80042b8 <_fwalk_reent+0x38>
 80042b0:	4629      	mov	r1, r5
 80042b2:	4640      	mov	r0, r8
 80042b4:	47c8      	blx	r9
 80042b6:	4306      	orrs	r6, r0
 80042b8:	3568      	adds	r5, #104	; 0x68
 80042ba:	e7ee      	b.n	800429a <_fwalk_reent+0x1a>

080042bc <__swhatbuf_r>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	460e      	mov	r6, r1
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	2900      	cmp	r1, #0
 80042c6:	b096      	sub	sp, #88	; 0x58
 80042c8:	4614      	mov	r4, r2
 80042ca:	461d      	mov	r5, r3
 80042cc:	da07      	bge.n	80042de <__swhatbuf_r+0x22>
 80042ce:	2300      	movs	r3, #0
 80042d0:	602b      	str	r3, [r5, #0]
 80042d2:	89b3      	ldrh	r3, [r6, #12]
 80042d4:	061a      	lsls	r2, r3, #24
 80042d6:	d410      	bmi.n	80042fa <__swhatbuf_r+0x3e>
 80042d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042dc:	e00e      	b.n	80042fc <__swhatbuf_r+0x40>
 80042de:	466a      	mov	r2, sp
 80042e0:	f000 fc3e 	bl	8004b60 <_fstat_r>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	dbf2      	blt.n	80042ce <__swhatbuf_r+0x12>
 80042e8:	9a01      	ldr	r2, [sp, #4]
 80042ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042f2:	425a      	negs	r2, r3
 80042f4:	415a      	adcs	r2, r3
 80042f6:	602a      	str	r2, [r5, #0]
 80042f8:	e7ee      	b.n	80042d8 <__swhatbuf_r+0x1c>
 80042fa:	2340      	movs	r3, #64	; 0x40
 80042fc:	2000      	movs	r0, #0
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	b016      	add	sp, #88	; 0x58
 8004302:	bd70      	pop	{r4, r5, r6, pc}

08004304 <__smakebuf_r>:
 8004304:	898b      	ldrh	r3, [r1, #12]
 8004306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004308:	079d      	lsls	r5, r3, #30
 800430a:	4606      	mov	r6, r0
 800430c:	460c      	mov	r4, r1
 800430e:	d507      	bpl.n	8004320 <__smakebuf_r+0x1c>
 8004310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	6123      	str	r3, [r4, #16]
 8004318:	2301      	movs	r3, #1
 800431a:	6163      	str	r3, [r4, #20]
 800431c:	b002      	add	sp, #8
 800431e:	bd70      	pop	{r4, r5, r6, pc}
 8004320:	ab01      	add	r3, sp, #4
 8004322:	466a      	mov	r2, sp
 8004324:	f7ff ffca 	bl	80042bc <__swhatbuf_r>
 8004328:	9900      	ldr	r1, [sp, #0]
 800432a:	4605      	mov	r5, r0
 800432c:	4630      	mov	r0, r6
 800432e:	f000 f87f 	bl	8004430 <_malloc_r>
 8004332:	b948      	cbnz	r0, 8004348 <__smakebuf_r+0x44>
 8004334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004338:	059a      	lsls	r2, r3, #22
 800433a:	d4ef      	bmi.n	800431c <__smakebuf_r+0x18>
 800433c:	f023 0303 	bic.w	r3, r3, #3
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	81a3      	strh	r3, [r4, #12]
 8004346:	e7e3      	b.n	8004310 <__smakebuf_r+0xc>
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <__smakebuf_r+0x7c>)
 800434a:	62b3      	str	r3, [r6, #40]	; 0x28
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	6020      	str	r0, [r4, #0]
 8004350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	9b00      	ldr	r3, [sp, #0]
 8004358:	6163      	str	r3, [r4, #20]
 800435a:	9b01      	ldr	r3, [sp, #4]
 800435c:	6120      	str	r0, [r4, #16]
 800435e:	b15b      	cbz	r3, 8004378 <__smakebuf_r+0x74>
 8004360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004364:	4630      	mov	r0, r6
 8004366:	f000 fc0d 	bl	8004b84 <_isatty_r>
 800436a:	b128      	cbz	r0, 8004378 <__smakebuf_r+0x74>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	431d      	orrs	r5, r3
 800437c:	81a5      	strh	r5, [r4, #12]
 800437e:	e7cd      	b.n	800431c <__smakebuf_r+0x18>
 8004380:	08004171 	.word	0x08004171

08004384 <malloc>:
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <malloc+0xc>)
 8004386:	4601      	mov	r1, r0
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f000 b851 	b.w	8004430 <_malloc_r>
 800438e:	bf00      	nop
 8004390:	2000000c 	.word	0x2000000c

08004394 <_free_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4605      	mov	r5, r0
 8004398:	2900      	cmp	r1, #0
 800439a:	d045      	beq.n	8004428 <_free_r+0x94>
 800439c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a0:	1f0c      	subs	r4, r1, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bfb8      	it	lt
 80043a6:	18e4      	addlt	r4, r4, r3
 80043a8:	f000 fc0e 	bl	8004bc8 <__malloc_lock>
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <_free_r+0x98>)
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	4610      	mov	r0, r2
 80043b2:	b933      	cbnz	r3, 80043c2 <_free_r+0x2e>
 80043b4:	6063      	str	r3, [r4, #4]
 80043b6:	6014      	str	r4, [r2, #0]
 80043b8:	4628      	mov	r0, r5
 80043ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043be:	f000 bc04 	b.w	8004bca <__malloc_unlock>
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	d90c      	bls.n	80043e0 <_free_r+0x4c>
 80043c6:	6821      	ldr	r1, [r4, #0]
 80043c8:	1862      	adds	r2, r4, r1
 80043ca:	4293      	cmp	r3, r2
 80043cc:	bf04      	itt	eq
 80043ce:	681a      	ldreq	r2, [r3, #0]
 80043d0:	685b      	ldreq	r3, [r3, #4]
 80043d2:	6063      	str	r3, [r4, #4]
 80043d4:	bf04      	itt	eq
 80043d6:	1852      	addeq	r2, r2, r1
 80043d8:	6022      	streq	r2, [r4, #0]
 80043da:	6004      	str	r4, [r0, #0]
 80043dc:	e7ec      	b.n	80043b8 <_free_r+0x24>
 80043de:	4613      	mov	r3, r2
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	b10a      	cbz	r2, 80043e8 <_free_r+0x54>
 80043e4:	42a2      	cmp	r2, r4
 80043e6:	d9fa      	bls.n	80043de <_free_r+0x4a>
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	1858      	adds	r0, r3, r1
 80043ec:	42a0      	cmp	r0, r4
 80043ee:	d10b      	bne.n	8004408 <_free_r+0x74>
 80043f0:	6820      	ldr	r0, [r4, #0]
 80043f2:	4401      	add	r1, r0
 80043f4:	1858      	adds	r0, r3, r1
 80043f6:	4282      	cmp	r2, r0
 80043f8:	6019      	str	r1, [r3, #0]
 80043fa:	d1dd      	bne.n	80043b8 <_free_r+0x24>
 80043fc:	6810      	ldr	r0, [r2, #0]
 80043fe:	6852      	ldr	r2, [r2, #4]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	4401      	add	r1, r0
 8004404:	6019      	str	r1, [r3, #0]
 8004406:	e7d7      	b.n	80043b8 <_free_r+0x24>
 8004408:	d902      	bls.n	8004410 <_free_r+0x7c>
 800440a:	230c      	movs	r3, #12
 800440c:	602b      	str	r3, [r5, #0]
 800440e:	e7d3      	b.n	80043b8 <_free_r+0x24>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	1821      	adds	r1, r4, r0
 8004414:	428a      	cmp	r2, r1
 8004416:	bf04      	itt	eq
 8004418:	6811      	ldreq	r1, [r2, #0]
 800441a:	6852      	ldreq	r2, [r2, #4]
 800441c:	6062      	str	r2, [r4, #4]
 800441e:	bf04      	itt	eq
 8004420:	1809      	addeq	r1, r1, r0
 8004422:	6021      	streq	r1, [r4, #0]
 8004424:	605c      	str	r4, [r3, #4]
 8004426:	e7c7      	b.n	80043b8 <_free_r+0x24>
 8004428:	bd38      	pop	{r3, r4, r5, pc}
 800442a:	bf00      	nop
 800442c:	20000090 	.word	0x20000090

08004430 <_malloc_r>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	1ccd      	adds	r5, r1, #3
 8004434:	f025 0503 	bic.w	r5, r5, #3
 8004438:	3508      	adds	r5, #8
 800443a:	2d0c      	cmp	r5, #12
 800443c:	bf38      	it	cc
 800443e:	250c      	movcc	r5, #12
 8004440:	2d00      	cmp	r5, #0
 8004442:	4606      	mov	r6, r0
 8004444:	db01      	blt.n	800444a <_malloc_r+0x1a>
 8004446:	42a9      	cmp	r1, r5
 8004448:	d903      	bls.n	8004452 <_malloc_r+0x22>
 800444a:	230c      	movs	r3, #12
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	2000      	movs	r0, #0
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	f000 fbb9 	bl	8004bc8 <__malloc_lock>
 8004456:	4a21      	ldr	r2, [pc, #132]	; (80044dc <_malloc_r+0xac>)
 8004458:	6814      	ldr	r4, [r2, #0]
 800445a:	4621      	mov	r1, r4
 800445c:	b991      	cbnz	r1, 8004484 <_malloc_r+0x54>
 800445e:	4c20      	ldr	r4, [pc, #128]	; (80044e0 <_malloc_r+0xb0>)
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	b91b      	cbnz	r3, 800446c <_malloc_r+0x3c>
 8004464:	4630      	mov	r0, r6
 8004466:	f000 fb05 	bl	8004a74 <_sbrk_r>
 800446a:	6020      	str	r0, [r4, #0]
 800446c:	4629      	mov	r1, r5
 800446e:	4630      	mov	r0, r6
 8004470:	f000 fb00 	bl	8004a74 <_sbrk_r>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d124      	bne.n	80044c2 <_malloc_r+0x92>
 8004478:	230c      	movs	r3, #12
 800447a:	6033      	str	r3, [r6, #0]
 800447c:	4630      	mov	r0, r6
 800447e:	f000 fba4 	bl	8004bca <__malloc_unlock>
 8004482:	e7e4      	b.n	800444e <_malloc_r+0x1e>
 8004484:	680b      	ldr	r3, [r1, #0]
 8004486:	1b5b      	subs	r3, r3, r5
 8004488:	d418      	bmi.n	80044bc <_malloc_r+0x8c>
 800448a:	2b0b      	cmp	r3, #11
 800448c:	d90f      	bls.n	80044ae <_malloc_r+0x7e>
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	50cd      	str	r5, [r1, r3]
 8004492:	18cc      	adds	r4, r1, r3
 8004494:	4630      	mov	r0, r6
 8004496:	f000 fb98 	bl	8004bca <__malloc_unlock>
 800449a:	f104 000b 	add.w	r0, r4, #11
 800449e:	1d23      	adds	r3, r4, #4
 80044a0:	f020 0007 	bic.w	r0, r0, #7
 80044a4:	1ac3      	subs	r3, r0, r3
 80044a6:	d0d3      	beq.n	8004450 <_malloc_r+0x20>
 80044a8:	425a      	negs	r2, r3
 80044aa:	50e2      	str	r2, [r4, r3]
 80044ac:	e7d0      	b.n	8004450 <_malloc_r+0x20>
 80044ae:	428c      	cmp	r4, r1
 80044b0:	684b      	ldr	r3, [r1, #4]
 80044b2:	bf16      	itet	ne
 80044b4:	6063      	strne	r3, [r4, #4]
 80044b6:	6013      	streq	r3, [r2, #0]
 80044b8:	460c      	movne	r4, r1
 80044ba:	e7eb      	b.n	8004494 <_malloc_r+0x64>
 80044bc:	460c      	mov	r4, r1
 80044be:	6849      	ldr	r1, [r1, #4]
 80044c0:	e7cc      	b.n	800445c <_malloc_r+0x2c>
 80044c2:	1cc4      	adds	r4, r0, #3
 80044c4:	f024 0403 	bic.w	r4, r4, #3
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d005      	beq.n	80044d8 <_malloc_r+0xa8>
 80044cc:	1a21      	subs	r1, r4, r0
 80044ce:	4630      	mov	r0, r6
 80044d0:	f000 fad0 	bl	8004a74 <_sbrk_r>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d0cf      	beq.n	8004478 <_malloc_r+0x48>
 80044d8:	6025      	str	r5, [r4, #0]
 80044da:	e7db      	b.n	8004494 <_malloc_r+0x64>
 80044dc:	20000090 	.word	0x20000090
 80044e0:	20000094 	.word	0x20000094

080044e4 <__sfputc_r>:
 80044e4:	6893      	ldr	r3, [r2, #8]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	b410      	push	{r4}
 80044ec:	6093      	str	r3, [r2, #8]
 80044ee:	da08      	bge.n	8004502 <__sfputc_r+0x1e>
 80044f0:	6994      	ldr	r4, [r2, #24]
 80044f2:	42a3      	cmp	r3, r4
 80044f4:	db01      	blt.n	80044fa <__sfputc_r+0x16>
 80044f6:	290a      	cmp	r1, #10
 80044f8:	d103      	bne.n	8004502 <__sfputc_r+0x1e>
 80044fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044fe:	f7ff bca3 	b.w	8003e48 <__swbuf_r>
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	1c58      	adds	r0, r3, #1
 8004506:	6010      	str	r0, [r2, #0]
 8004508:	7019      	strb	r1, [r3, #0]
 800450a:	4608      	mov	r0, r1
 800450c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004510:	4770      	bx	lr

08004512 <__sfputs_r>:
 8004512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004514:	4606      	mov	r6, r0
 8004516:	460f      	mov	r7, r1
 8004518:	4614      	mov	r4, r2
 800451a:	18d5      	adds	r5, r2, r3
 800451c:	42ac      	cmp	r4, r5
 800451e:	d101      	bne.n	8004524 <__sfputs_r+0x12>
 8004520:	2000      	movs	r0, #0
 8004522:	e007      	b.n	8004534 <__sfputs_r+0x22>
 8004524:	463a      	mov	r2, r7
 8004526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff ffda 	bl	80044e4 <__sfputc_r>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d1f3      	bne.n	800451c <__sfputs_r+0xa>
 8004534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004538 <_vfiprintf_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	460c      	mov	r4, r1
 800453e:	b09d      	sub	sp, #116	; 0x74
 8004540:	4617      	mov	r7, r2
 8004542:	461d      	mov	r5, r3
 8004544:	4606      	mov	r6, r0
 8004546:	b118      	cbz	r0, 8004550 <_vfiprintf_r+0x18>
 8004548:	6983      	ldr	r3, [r0, #24]
 800454a:	b90b      	cbnz	r3, 8004550 <_vfiprintf_r+0x18>
 800454c:	f7ff fe2c 	bl	80041a8 <__sinit>
 8004550:	4b7c      	ldr	r3, [pc, #496]	; (8004744 <_vfiprintf_r+0x20c>)
 8004552:	429c      	cmp	r4, r3
 8004554:	d158      	bne.n	8004608 <_vfiprintf_r+0xd0>
 8004556:	6874      	ldr	r4, [r6, #4]
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	0718      	lsls	r0, r3, #28
 800455c:	d55e      	bpl.n	800461c <_vfiprintf_r+0xe4>
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <_vfiprintf_r+0xe4>
 8004564:	2300      	movs	r3, #0
 8004566:	9309      	str	r3, [sp, #36]	; 0x24
 8004568:	2320      	movs	r3, #32
 800456a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800456e:	2330      	movs	r3, #48	; 0x30
 8004570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004574:	9503      	str	r5, [sp, #12]
 8004576:	f04f 0b01 	mov.w	fp, #1
 800457a:	46b8      	mov	r8, r7
 800457c:	4645      	mov	r5, r8
 800457e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004582:	b10b      	cbz	r3, 8004588 <_vfiprintf_r+0x50>
 8004584:	2b25      	cmp	r3, #37	; 0x25
 8004586:	d154      	bne.n	8004632 <_vfiprintf_r+0xfa>
 8004588:	ebb8 0a07 	subs.w	sl, r8, r7
 800458c:	d00b      	beq.n	80045a6 <_vfiprintf_r+0x6e>
 800458e:	4653      	mov	r3, sl
 8004590:	463a      	mov	r2, r7
 8004592:	4621      	mov	r1, r4
 8004594:	4630      	mov	r0, r6
 8004596:	f7ff ffbc 	bl	8004512 <__sfputs_r>
 800459a:	3001      	adds	r0, #1
 800459c:	f000 80c2 	beq.w	8004724 <_vfiprintf_r+0x1ec>
 80045a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a2:	4453      	add	r3, sl
 80045a4:	9309      	str	r3, [sp, #36]	; 0x24
 80045a6:	f898 3000 	ldrb.w	r3, [r8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80ba 	beq.w	8004724 <_vfiprintf_r+0x1ec>
 80045b0:	2300      	movs	r3, #0
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	9307      	str	r3, [sp, #28]
 80045be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045c2:	931a      	str	r3, [sp, #104]	; 0x68
 80045c4:	46a8      	mov	r8, r5
 80045c6:	2205      	movs	r2, #5
 80045c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80045cc:	485e      	ldr	r0, [pc, #376]	; (8004748 <_vfiprintf_r+0x210>)
 80045ce:	f7fb fdff 	bl	80001d0 <memchr>
 80045d2:	9b04      	ldr	r3, [sp, #16]
 80045d4:	bb78      	cbnz	r0, 8004636 <_vfiprintf_r+0xfe>
 80045d6:	06d9      	lsls	r1, r3, #27
 80045d8:	bf44      	itt	mi
 80045da:	2220      	movmi	r2, #32
 80045dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045e0:	071a      	lsls	r2, r3, #28
 80045e2:	bf44      	itt	mi
 80045e4:	222b      	movmi	r2, #43	; 0x2b
 80045e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045ea:	782a      	ldrb	r2, [r5, #0]
 80045ec:	2a2a      	cmp	r2, #42	; 0x2a
 80045ee:	d02a      	beq.n	8004646 <_vfiprintf_r+0x10e>
 80045f0:	9a07      	ldr	r2, [sp, #28]
 80045f2:	46a8      	mov	r8, r5
 80045f4:	2000      	movs	r0, #0
 80045f6:	250a      	movs	r5, #10
 80045f8:	4641      	mov	r1, r8
 80045fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045fe:	3b30      	subs	r3, #48	; 0x30
 8004600:	2b09      	cmp	r3, #9
 8004602:	d969      	bls.n	80046d8 <_vfiprintf_r+0x1a0>
 8004604:	b360      	cbz	r0, 8004660 <_vfiprintf_r+0x128>
 8004606:	e024      	b.n	8004652 <_vfiprintf_r+0x11a>
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <_vfiprintf_r+0x214>)
 800460a:	429c      	cmp	r4, r3
 800460c:	d101      	bne.n	8004612 <_vfiprintf_r+0xda>
 800460e:	68b4      	ldr	r4, [r6, #8]
 8004610:	e7a2      	b.n	8004558 <_vfiprintf_r+0x20>
 8004612:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <_vfiprintf_r+0x218>)
 8004614:	429c      	cmp	r4, r3
 8004616:	bf08      	it	eq
 8004618:	68f4      	ldreq	r4, [r6, #12]
 800461a:	e79d      	b.n	8004558 <_vfiprintf_r+0x20>
 800461c:	4621      	mov	r1, r4
 800461e:	4630      	mov	r0, r6
 8004620:	f7ff fc64 	bl	8003eec <__swsetup_r>
 8004624:	2800      	cmp	r0, #0
 8004626:	d09d      	beq.n	8004564 <_vfiprintf_r+0x2c>
 8004628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800462c:	b01d      	add	sp, #116	; 0x74
 800462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004632:	46a8      	mov	r8, r5
 8004634:	e7a2      	b.n	800457c <_vfiprintf_r+0x44>
 8004636:	4a44      	ldr	r2, [pc, #272]	; (8004748 <_vfiprintf_r+0x210>)
 8004638:	1a80      	subs	r0, r0, r2
 800463a:	fa0b f000 	lsl.w	r0, fp, r0
 800463e:	4318      	orrs	r0, r3
 8004640:	9004      	str	r0, [sp, #16]
 8004642:	4645      	mov	r5, r8
 8004644:	e7be      	b.n	80045c4 <_vfiprintf_r+0x8c>
 8004646:	9a03      	ldr	r2, [sp, #12]
 8004648:	1d11      	adds	r1, r2, #4
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	9103      	str	r1, [sp, #12]
 800464e:	2a00      	cmp	r2, #0
 8004650:	db01      	blt.n	8004656 <_vfiprintf_r+0x11e>
 8004652:	9207      	str	r2, [sp, #28]
 8004654:	e004      	b.n	8004660 <_vfiprintf_r+0x128>
 8004656:	4252      	negs	r2, r2
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	9207      	str	r2, [sp, #28]
 800465e:	9304      	str	r3, [sp, #16]
 8004660:	f898 3000 	ldrb.w	r3, [r8]
 8004664:	2b2e      	cmp	r3, #46	; 0x2e
 8004666:	d10e      	bne.n	8004686 <_vfiprintf_r+0x14e>
 8004668:	f898 3001 	ldrb.w	r3, [r8, #1]
 800466c:	2b2a      	cmp	r3, #42	; 0x2a
 800466e:	d138      	bne.n	80046e2 <_vfiprintf_r+0x1aa>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	9203      	str	r2, [sp, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfb8      	it	lt
 800467c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004680:	f108 0802 	add.w	r8, r8, #2
 8004684:	9305      	str	r3, [sp, #20]
 8004686:	4d33      	ldr	r5, [pc, #204]	; (8004754 <_vfiprintf_r+0x21c>)
 8004688:	f898 1000 	ldrb.w	r1, [r8]
 800468c:	2203      	movs	r2, #3
 800468e:	4628      	mov	r0, r5
 8004690:	f7fb fd9e 	bl	80001d0 <memchr>
 8004694:	b140      	cbz	r0, 80046a8 <_vfiprintf_r+0x170>
 8004696:	2340      	movs	r3, #64	; 0x40
 8004698:	1b40      	subs	r0, r0, r5
 800469a:	fa03 f000 	lsl.w	r0, r3, r0
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	4303      	orrs	r3, r0
 80046a2:	f108 0801 	add.w	r8, r8, #1
 80046a6:	9304      	str	r3, [sp, #16]
 80046a8:	f898 1000 	ldrb.w	r1, [r8]
 80046ac:	482a      	ldr	r0, [pc, #168]	; (8004758 <_vfiprintf_r+0x220>)
 80046ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b2:	2206      	movs	r2, #6
 80046b4:	f108 0701 	add.w	r7, r8, #1
 80046b8:	f7fb fd8a 	bl	80001d0 <memchr>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d037      	beq.n	8004730 <_vfiprintf_r+0x1f8>
 80046c0:	4b26      	ldr	r3, [pc, #152]	; (800475c <_vfiprintf_r+0x224>)
 80046c2:	bb1b      	cbnz	r3, 800470c <_vfiprintf_r+0x1d4>
 80046c4:	9b03      	ldr	r3, [sp, #12]
 80046c6:	3307      	adds	r3, #7
 80046c8:	f023 0307 	bic.w	r3, r3, #7
 80046cc:	3308      	adds	r3, #8
 80046ce:	9303      	str	r3, [sp, #12]
 80046d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d2:	444b      	add	r3, r9
 80046d4:	9309      	str	r3, [sp, #36]	; 0x24
 80046d6:	e750      	b.n	800457a <_vfiprintf_r+0x42>
 80046d8:	fb05 3202 	mla	r2, r5, r2, r3
 80046dc:	2001      	movs	r0, #1
 80046de:	4688      	mov	r8, r1
 80046e0:	e78a      	b.n	80045f8 <_vfiprintf_r+0xc0>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f108 0801 	add.w	r8, r8, #1
 80046e8:	9305      	str	r3, [sp, #20]
 80046ea:	4619      	mov	r1, r3
 80046ec:	250a      	movs	r5, #10
 80046ee:	4640      	mov	r0, r8
 80046f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f4:	3a30      	subs	r2, #48	; 0x30
 80046f6:	2a09      	cmp	r2, #9
 80046f8:	d903      	bls.n	8004702 <_vfiprintf_r+0x1ca>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0c3      	beq.n	8004686 <_vfiprintf_r+0x14e>
 80046fe:	9105      	str	r1, [sp, #20]
 8004700:	e7c1      	b.n	8004686 <_vfiprintf_r+0x14e>
 8004702:	fb05 2101 	mla	r1, r5, r1, r2
 8004706:	2301      	movs	r3, #1
 8004708:	4680      	mov	r8, r0
 800470a:	e7f0      	b.n	80046ee <_vfiprintf_r+0x1b6>
 800470c:	ab03      	add	r3, sp, #12
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4622      	mov	r2, r4
 8004712:	4b13      	ldr	r3, [pc, #76]	; (8004760 <_vfiprintf_r+0x228>)
 8004714:	a904      	add	r1, sp, #16
 8004716:	4630      	mov	r0, r6
 8004718:	f3af 8000 	nop.w
 800471c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004720:	4681      	mov	r9, r0
 8004722:	d1d5      	bne.n	80046d0 <_vfiprintf_r+0x198>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	065b      	lsls	r3, r3, #25
 8004728:	f53f af7e 	bmi.w	8004628 <_vfiprintf_r+0xf0>
 800472c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800472e:	e77d      	b.n	800462c <_vfiprintf_r+0xf4>
 8004730:	ab03      	add	r3, sp, #12
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4622      	mov	r2, r4
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <_vfiprintf_r+0x228>)
 8004738:	a904      	add	r1, sp, #16
 800473a:	4630      	mov	r0, r6
 800473c:	f000 f888 	bl	8004850 <_printf_i>
 8004740:	e7ec      	b.n	800471c <_vfiprintf_r+0x1e4>
 8004742:	bf00      	nop
 8004744:	08004ce0 	.word	0x08004ce0
 8004748:	08004d20 	.word	0x08004d20
 800474c:	08004d00 	.word	0x08004d00
 8004750:	08004cc0 	.word	0x08004cc0
 8004754:	08004d26 	.word	0x08004d26
 8004758:	08004d2a 	.word	0x08004d2a
 800475c:	00000000 	.word	0x00000000
 8004760:	08004513 	.word	0x08004513

08004764 <_printf_common>:
 8004764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	4691      	mov	r9, r2
 800476a:	461f      	mov	r7, r3
 800476c:	688a      	ldr	r2, [r1, #8]
 800476e:	690b      	ldr	r3, [r1, #16]
 8004770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004774:	4293      	cmp	r3, r2
 8004776:	bfb8      	it	lt
 8004778:	4613      	movlt	r3, r2
 800477a:	f8c9 3000 	str.w	r3, [r9]
 800477e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004782:	4606      	mov	r6, r0
 8004784:	460c      	mov	r4, r1
 8004786:	b112      	cbz	r2, 800478e <_printf_common+0x2a>
 8004788:	3301      	adds	r3, #1
 800478a:	f8c9 3000 	str.w	r3, [r9]
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	0699      	lsls	r1, r3, #26
 8004792:	bf42      	ittt	mi
 8004794:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004798:	3302      	addmi	r3, #2
 800479a:	f8c9 3000 	strmi.w	r3, [r9]
 800479e:	6825      	ldr	r5, [r4, #0]
 80047a0:	f015 0506 	ands.w	r5, r5, #6
 80047a4:	d107      	bne.n	80047b6 <_printf_common+0x52>
 80047a6:	f104 0a19 	add.w	sl, r4, #25
 80047aa:	68e3      	ldr	r3, [r4, #12]
 80047ac:	f8d9 2000 	ldr.w	r2, [r9]
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	42ab      	cmp	r3, r5
 80047b4:	dc28      	bgt.n	8004808 <_printf_common+0xa4>
 80047b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	3300      	adds	r3, #0
 80047be:	bf18      	it	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	0692      	lsls	r2, r2, #26
 80047c4:	d42d      	bmi.n	8004822 <_printf_common+0xbe>
 80047c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047ca:	4639      	mov	r1, r7
 80047cc:	4630      	mov	r0, r6
 80047ce:	47c0      	blx	r8
 80047d0:	3001      	adds	r0, #1
 80047d2:	d020      	beq.n	8004816 <_printf_common+0xb2>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	68e5      	ldr	r5, [r4, #12]
 80047d8:	f8d9 2000 	ldr.w	r2, [r9]
 80047dc:	f003 0306 	and.w	r3, r3, #6
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	bf08      	it	eq
 80047e4:	1aad      	subeq	r5, r5, r2
 80047e6:	68a3      	ldr	r3, [r4, #8]
 80047e8:	6922      	ldr	r2, [r4, #16]
 80047ea:	bf0c      	ite	eq
 80047ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f0:	2500      	movne	r5, #0
 80047f2:	4293      	cmp	r3, r2
 80047f4:	bfc4      	itt	gt
 80047f6:	1a9b      	subgt	r3, r3, r2
 80047f8:	18ed      	addgt	r5, r5, r3
 80047fa:	f04f 0900 	mov.w	r9, #0
 80047fe:	341a      	adds	r4, #26
 8004800:	454d      	cmp	r5, r9
 8004802:	d11a      	bne.n	800483a <_printf_common+0xd6>
 8004804:	2000      	movs	r0, #0
 8004806:	e008      	b.n	800481a <_printf_common+0xb6>
 8004808:	2301      	movs	r3, #1
 800480a:	4652      	mov	r2, sl
 800480c:	4639      	mov	r1, r7
 800480e:	4630      	mov	r0, r6
 8004810:	47c0      	blx	r8
 8004812:	3001      	adds	r0, #1
 8004814:	d103      	bne.n	800481e <_printf_common+0xba>
 8004816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481e:	3501      	adds	r5, #1
 8004820:	e7c3      	b.n	80047aa <_printf_common+0x46>
 8004822:	18e1      	adds	r1, r4, r3
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	2030      	movs	r0, #48	; 0x30
 8004828:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800482c:	4422      	add	r2, r4
 800482e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004832:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004836:	3302      	adds	r3, #2
 8004838:	e7c5      	b.n	80047c6 <_printf_common+0x62>
 800483a:	2301      	movs	r3, #1
 800483c:	4622      	mov	r2, r4
 800483e:	4639      	mov	r1, r7
 8004840:	4630      	mov	r0, r6
 8004842:	47c0      	blx	r8
 8004844:	3001      	adds	r0, #1
 8004846:	d0e6      	beq.n	8004816 <_printf_common+0xb2>
 8004848:	f109 0901 	add.w	r9, r9, #1
 800484c:	e7d8      	b.n	8004800 <_printf_common+0x9c>
	...

08004850 <_printf_i>:
 8004850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004854:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004858:	460c      	mov	r4, r1
 800485a:	7e09      	ldrb	r1, [r1, #24]
 800485c:	b085      	sub	sp, #20
 800485e:	296e      	cmp	r1, #110	; 0x6e
 8004860:	4617      	mov	r7, r2
 8004862:	4606      	mov	r6, r0
 8004864:	4698      	mov	r8, r3
 8004866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004868:	f000 80b3 	beq.w	80049d2 <_printf_i+0x182>
 800486c:	d822      	bhi.n	80048b4 <_printf_i+0x64>
 800486e:	2963      	cmp	r1, #99	; 0x63
 8004870:	d036      	beq.n	80048e0 <_printf_i+0x90>
 8004872:	d80a      	bhi.n	800488a <_printf_i+0x3a>
 8004874:	2900      	cmp	r1, #0
 8004876:	f000 80b9 	beq.w	80049ec <_printf_i+0x19c>
 800487a:	2958      	cmp	r1, #88	; 0x58
 800487c:	f000 8083 	beq.w	8004986 <_printf_i+0x136>
 8004880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004884:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004888:	e032      	b.n	80048f0 <_printf_i+0xa0>
 800488a:	2964      	cmp	r1, #100	; 0x64
 800488c:	d001      	beq.n	8004892 <_printf_i+0x42>
 800488e:	2969      	cmp	r1, #105	; 0x69
 8004890:	d1f6      	bne.n	8004880 <_printf_i+0x30>
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	0605      	lsls	r5, r0, #24
 8004898:	f103 0104 	add.w	r1, r3, #4
 800489c:	d52a      	bpl.n	80048f4 <_printf_i+0xa4>
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da03      	bge.n	80048ae <_printf_i+0x5e>
 80048a6:	222d      	movs	r2, #45	; 0x2d
 80048a8:	425b      	negs	r3, r3
 80048aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048ae:	486f      	ldr	r0, [pc, #444]	; (8004a6c <_printf_i+0x21c>)
 80048b0:	220a      	movs	r2, #10
 80048b2:	e039      	b.n	8004928 <_printf_i+0xd8>
 80048b4:	2973      	cmp	r1, #115	; 0x73
 80048b6:	f000 809d 	beq.w	80049f4 <_printf_i+0x1a4>
 80048ba:	d808      	bhi.n	80048ce <_printf_i+0x7e>
 80048bc:	296f      	cmp	r1, #111	; 0x6f
 80048be:	d020      	beq.n	8004902 <_printf_i+0xb2>
 80048c0:	2970      	cmp	r1, #112	; 0x70
 80048c2:	d1dd      	bne.n	8004880 <_printf_i+0x30>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	f043 0320 	orr.w	r3, r3, #32
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	e003      	b.n	80048d6 <_printf_i+0x86>
 80048ce:	2975      	cmp	r1, #117	; 0x75
 80048d0:	d017      	beq.n	8004902 <_printf_i+0xb2>
 80048d2:	2978      	cmp	r1, #120	; 0x78
 80048d4:	d1d4      	bne.n	8004880 <_printf_i+0x30>
 80048d6:	2378      	movs	r3, #120	; 0x78
 80048d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048dc:	4864      	ldr	r0, [pc, #400]	; (8004a70 <_printf_i+0x220>)
 80048de:	e055      	b.n	800498c <_printf_i+0x13c>
 80048e0:	6813      	ldr	r3, [r2, #0]
 80048e2:	1d19      	adds	r1, r3, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6011      	str	r1, [r2, #0]
 80048e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048f0:	2301      	movs	r3, #1
 80048f2:	e08c      	b.n	8004a0e <_printf_i+0x1be>
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6011      	str	r1, [r2, #0]
 80048f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048fc:	bf18      	it	ne
 80048fe:	b21b      	sxthne	r3, r3
 8004900:	e7cf      	b.n	80048a2 <_printf_i+0x52>
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	6825      	ldr	r5, [r4, #0]
 8004906:	1d18      	adds	r0, r3, #4
 8004908:	6010      	str	r0, [r2, #0]
 800490a:	0628      	lsls	r0, r5, #24
 800490c:	d501      	bpl.n	8004912 <_printf_i+0xc2>
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	e002      	b.n	8004918 <_printf_i+0xc8>
 8004912:	0668      	lsls	r0, r5, #25
 8004914:	d5fb      	bpl.n	800490e <_printf_i+0xbe>
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	4854      	ldr	r0, [pc, #336]	; (8004a6c <_printf_i+0x21c>)
 800491a:	296f      	cmp	r1, #111	; 0x6f
 800491c:	bf14      	ite	ne
 800491e:	220a      	movne	r2, #10
 8004920:	2208      	moveq	r2, #8
 8004922:	2100      	movs	r1, #0
 8004924:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004928:	6865      	ldr	r5, [r4, #4]
 800492a:	60a5      	str	r5, [r4, #8]
 800492c:	2d00      	cmp	r5, #0
 800492e:	f2c0 8095 	blt.w	8004a5c <_printf_i+0x20c>
 8004932:	6821      	ldr	r1, [r4, #0]
 8004934:	f021 0104 	bic.w	r1, r1, #4
 8004938:	6021      	str	r1, [r4, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d13d      	bne.n	80049ba <_printf_i+0x16a>
 800493e:	2d00      	cmp	r5, #0
 8004940:	f040 808e 	bne.w	8004a60 <_printf_i+0x210>
 8004944:	4665      	mov	r5, ip
 8004946:	2a08      	cmp	r2, #8
 8004948:	d10b      	bne.n	8004962 <_printf_i+0x112>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	07db      	lsls	r3, r3, #31
 800494e:	d508      	bpl.n	8004962 <_printf_i+0x112>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	6862      	ldr	r2, [r4, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	bfde      	ittt	le
 8004958:	2330      	movle	r3, #48	; 0x30
 800495a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800495e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004962:	ebac 0305 	sub.w	r3, ip, r5
 8004966:	6123      	str	r3, [r4, #16]
 8004968:	f8cd 8000 	str.w	r8, [sp]
 800496c:	463b      	mov	r3, r7
 800496e:	aa03      	add	r2, sp, #12
 8004970:	4621      	mov	r1, r4
 8004972:	4630      	mov	r0, r6
 8004974:	f7ff fef6 	bl	8004764 <_printf_common>
 8004978:	3001      	adds	r0, #1
 800497a:	d14d      	bne.n	8004a18 <_printf_i+0x1c8>
 800497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004980:	b005      	add	sp, #20
 8004982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004986:	4839      	ldr	r0, [pc, #228]	; (8004a6c <_printf_i+0x21c>)
 8004988:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	6821      	ldr	r1, [r4, #0]
 8004990:	1d1d      	adds	r5, r3, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6015      	str	r5, [r2, #0]
 8004996:	060a      	lsls	r2, r1, #24
 8004998:	d50b      	bpl.n	80049b2 <_printf_i+0x162>
 800499a:	07ca      	lsls	r2, r1, #31
 800499c:	bf44      	itt	mi
 800499e:	f041 0120 	orrmi.w	r1, r1, #32
 80049a2:	6021      	strmi	r1, [r4, #0]
 80049a4:	b91b      	cbnz	r3, 80049ae <_printf_i+0x15e>
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	f022 0220 	bic.w	r2, r2, #32
 80049ac:	6022      	str	r2, [r4, #0]
 80049ae:	2210      	movs	r2, #16
 80049b0:	e7b7      	b.n	8004922 <_printf_i+0xd2>
 80049b2:	064d      	lsls	r5, r1, #25
 80049b4:	bf48      	it	mi
 80049b6:	b29b      	uxthmi	r3, r3
 80049b8:	e7ef      	b.n	800499a <_printf_i+0x14a>
 80049ba:	4665      	mov	r5, ip
 80049bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80049c0:	fb02 3311 	mls	r3, r2, r1, r3
 80049c4:	5cc3      	ldrb	r3, [r0, r3]
 80049c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049ca:	460b      	mov	r3, r1
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d1f5      	bne.n	80049bc <_printf_i+0x16c>
 80049d0:	e7b9      	b.n	8004946 <_printf_i+0xf6>
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	6825      	ldr	r5, [r4, #0]
 80049d6:	6961      	ldr	r1, [r4, #20]
 80049d8:	1d18      	adds	r0, r3, #4
 80049da:	6010      	str	r0, [r2, #0]
 80049dc:	0628      	lsls	r0, r5, #24
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	d501      	bpl.n	80049e6 <_printf_i+0x196>
 80049e2:	6019      	str	r1, [r3, #0]
 80049e4:	e002      	b.n	80049ec <_printf_i+0x19c>
 80049e6:	066a      	lsls	r2, r5, #25
 80049e8:	d5fb      	bpl.n	80049e2 <_printf_i+0x192>
 80049ea:	8019      	strh	r1, [r3, #0]
 80049ec:	2300      	movs	r3, #0
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	4665      	mov	r5, ip
 80049f2:	e7b9      	b.n	8004968 <_printf_i+0x118>
 80049f4:	6813      	ldr	r3, [r2, #0]
 80049f6:	1d19      	adds	r1, r3, #4
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	681d      	ldr	r5, [r3, #0]
 80049fc:	6862      	ldr	r2, [r4, #4]
 80049fe:	2100      	movs	r1, #0
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7fb fbe5 	bl	80001d0 <memchr>
 8004a06:	b108      	cbz	r0, 8004a0c <_printf_i+0x1bc>
 8004a08:	1b40      	subs	r0, r0, r5
 8004a0a:	6060      	str	r0, [r4, #4]
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	6123      	str	r3, [r4, #16]
 8004a10:	2300      	movs	r3, #0
 8004a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a16:	e7a7      	b.n	8004968 <_printf_i+0x118>
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	4630      	mov	r0, r6
 8004a20:	47c0      	blx	r8
 8004a22:	3001      	adds	r0, #1
 8004a24:	d0aa      	beq.n	800497c <_printf_i+0x12c>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	079b      	lsls	r3, r3, #30
 8004a2a:	d413      	bmi.n	8004a54 <_printf_i+0x204>
 8004a2c:	68e0      	ldr	r0, [r4, #12]
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	4298      	cmp	r0, r3
 8004a32:	bfb8      	it	lt
 8004a34:	4618      	movlt	r0, r3
 8004a36:	e7a3      	b.n	8004980 <_printf_i+0x130>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	464a      	mov	r2, r9
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	4630      	mov	r0, r6
 8004a40:	47c0      	blx	r8
 8004a42:	3001      	adds	r0, #1
 8004a44:	d09a      	beq.n	800497c <_printf_i+0x12c>
 8004a46:	3501      	adds	r5, #1
 8004a48:	68e3      	ldr	r3, [r4, #12]
 8004a4a:	9a03      	ldr	r2, [sp, #12]
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	42ab      	cmp	r3, r5
 8004a50:	dcf2      	bgt.n	8004a38 <_printf_i+0x1e8>
 8004a52:	e7eb      	b.n	8004a2c <_printf_i+0x1dc>
 8004a54:	2500      	movs	r5, #0
 8004a56:	f104 0919 	add.w	r9, r4, #25
 8004a5a:	e7f5      	b.n	8004a48 <_printf_i+0x1f8>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ac      	bne.n	80049ba <_printf_i+0x16a>
 8004a60:	7803      	ldrb	r3, [r0, #0]
 8004a62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a6a:	e76c      	b.n	8004946 <_printf_i+0xf6>
 8004a6c:	08004d31 	.word	0x08004d31
 8004a70:	08004d42 	.word	0x08004d42

08004a74 <_sbrk_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4c06      	ldr	r4, [pc, #24]	; (8004a90 <_sbrk_r+0x1c>)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	f7fc f90e 	bl	8000ca0 <_sbrk>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d102      	bne.n	8004a8e <_sbrk_r+0x1a>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	b103      	cbz	r3, 8004a8e <_sbrk_r+0x1a>
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	20000184 	.word	0x20000184

08004a94 <__sread>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	460c      	mov	r4, r1
 8004a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9c:	f000 f896 	bl	8004bcc <_read_r>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	bfab      	itete	ge
 8004aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8004aa8:	181b      	addge	r3, r3, r0
 8004aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aae:	bfac      	ite	ge
 8004ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ab2:	81a3      	strhlt	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__swrite>:
 8004ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	461f      	mov	r7, r3
 8004abc:	898b      	ldrh	r3, [r1, #12]
 8004abe:	05db      	lsls	r3, r3, #23
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	d505      	bpl.n	8004ad4 <__swrite+0x1e>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	2200      	movs	r2, #0
 8004acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad0:	f000 f868 	bl	8004ba4 <_lseek_r>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aea:	f000 b817 	b.w	8004b1c <_write_r>

08004aee <__sseek>:
 8004aee:	b510      	push	{r4, lr}
 8004af0:	460c      	mov	r4, r1
 8004af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af6:	f000 f855 	bl	8004ba4 <_lseek_r>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	bf15      	itete	ne
 8004b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b0a:	81a3      	strheq	r3, [r4, #12]
 8004b0c:	bf18      	it	ne
 8004b0e:	81a3      	strhne	r3, [r4, #12]
 8004b10:	bd10      	pop	{r4, pc}

08004b12 <__sclose>:
 8004b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b16:	f000 b813 	b.w	8004b40 <_close_r>
	...

08004b1c <_write_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4c07      	ldr	r4, [pc, #28]	; (8004b3c <_write_r+0x20>)
 8004b20:	4605      	mov	r5, r0
 8004b22:	4608      	mov	r0, r1
 8004b24:	4611      	mov	r1, r2
 8004b26:	2200      	movs	r2, #0
 8004b28:	6022      	str	r2, [r4, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fb fd14 	bl	8000558 <_write>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_write_r+0x1e>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_write_r+0x1e>
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000184 	.word	0x20000184

08004b40 <_close_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4c06      	ldr	r4, [pc, #24]	; (8004b5c <_close_r+0x1c>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4605      	mov	r5, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	f7fc f873 	bl	8000c36 <_close>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_close_r+0x1a>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_close_r+0x1a>
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000184 	.word	0x20000184

08004b60 <_fstat_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4c07      	ldr	r4, [pc, #28]	; (8004b80 <_fstat_r+0x20>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	4605      	mov	r5, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	f7fc f86e 	bl	8000c4e <_fstat>
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	d102      	bne.n	8004b7c <_fstat_r+0x1c>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	b103      	cbz	r3, 8004b7c <_fstat_r+0x1c>
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	bd38      	pop	{r3, r4, r5, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000184 	.word	0x20000184

08004b84 <_isatty_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4c06      	ldr	r4, [pc, #24]	; (8004ba0 <_isatty_r+0x1c>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	f7fc f86d 	bl	8000c6e <_isatty>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_isatty_r+0x1a>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_isatty_r+0x1a>
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	20000184 	.word	0x20000184

08004ba4 <_lseek_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4c07      	ldr	r4, [pc, #28]	; (8004bc4 <_lseek_r+0x20>)
 8004ba8:	4605      	mov	r5, r0
 8004baa:	4608      	mov	r0, r1
 8004bac:	4611      	mov	r1, r2
 8004bae:	2200      	movs	r2, #0
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f7fc f866 	bl	8000c84 <_lseek>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_lseek_r+0x1e>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_lseek_r+0x1e>
 8004bc0:	602b      	str	r3, [r5, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20000184 	.word	0x20000184

08004bc8 <__malloc_lock>:
 8004bc8:	4770      	bx	lr

08004bca <__malloc_unlock>:
 8004bca:	4770      	bx	lr

08004bcc <_read_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4c07      	ldr	r4, [pc, #28]	; (8004bec <_read_r+0x20>)
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	6022      	str	r2, [r4, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f7fc f80e 	bl	8000bfc <_read>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_read_r+0x1e>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_read_r+0x1e>
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	20000184 	.word	0x20000184

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
